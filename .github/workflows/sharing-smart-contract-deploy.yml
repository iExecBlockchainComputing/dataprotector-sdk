name: Sharing Smart Contract - Deploy or Upgrade

on:
  workflow_dispatch: # Manually triggered
    inputs:
      network:
        description: 'Network'
        required: true
        type: choice
        options:
          - hardhat
          - avalancheFujiTestnet
          - arbitrumSepolia
          - arbitrum
          - bellecour
        default: 'hardhat'
      stage:
        description: 'Target stage'
        required: true
        type: choice
        options:
          - dev
          - prod
        default: 'dev'
      operation:
        description: 'Which operation to execute (deploy or upgrade)'
        required: true
        type: choice
        options:
          - deploy
          - upgrade
        default: 'deploy'

jobs:
  build-and-test:
    uses: ./.github/workflows/sharing-smart-contracts-ci.yml
    with:
      node-version: 20

  deploy-or-upgrade:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: ${{ inputs.network }}
    permissions:
      contents: write # Required to commit artifacts.
      pull-requests: write # Required to create pull requests.
    env:
      CI: true
      # For commit action
      COMMIT_MESSAGE: 'chore: Save artifacts - ${{ inputs.network }} ${{ inputs.stage }} (${{ github.run_id }})'
      GHA_BOT_NAME: 'GitHub Actions Bot'
      GHA_BOT_EMAIL: 'github-actions[bot]@users.noreply.github.com'
    steps:
      - name: Validate target environment
        id: validate-env
        if: inputs.network != 'hardhat'
        env:
          NETWORK: ${{ inputs.network }}
          STAGE: ${{ inputs.stage }}
        run: |
          DEPLOYMENT_ID=""
          case "$NETWORK" in
            arbitrum|bellecour)
              if [ "$STAGE" = "dev" ]; then
                echo "Error: Cannot use 'dev' stage with mainnet ($NETWORK)"
                exit 1
              fi
              # Use <network> as deployment id for mainnets.
              DEPLOYMENT_ID="${{ inputs.network }}"
              ;;
            *)
              # Use <network>-<stage> as deployment id for testnets.
              DEPLOYMENT_ID="${{ inputs.network }}-${{ inputs.stage }}"
              ;;
          esac
          echo "deployment-id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'packages/sharing-smart-contract'

      - name: Install dependencies
        working-directory: packages/sharing-smart-contract
        run: npm ci

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable
          cache: true

      - name: Deploy contracts
        if: inputs.operation == 'deploy'
        working-directory: packages/sharing-smart-contract
        env:
          DEPLOYMENT_ID: ${{ steps.validate-env.outputs.deployment-id }}
          RPC_URL: ${{ secrets.RPC_URL }}
          DEPLOYER_PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY }}
          ADMIN_PRIVATE_KEY: ${{ secrets.DATAPROTECTOR_OWNER_PRIVATEKEY }} # TODO Fix secret name
          POCO_ADDRESS: ${{ vars.POCO_ADDRESS }}
          DATASET_REGISTRY_ADDRESS: ${{ vars.DATASET_REGISTRY_ADDRESS }}
        run: DEPLOYMENT_ID="$DEPLOYMENT_ID" npm run deploy -- --network ${{ inputs.network }}

      - name: Upgrade contracts
        if: inputs.operation == 'upgrade'
        working-directory: packages/sharing-smart-contract
        env:
          DEPLOYMENT_ID: ${{ steps.validate-env.outputs.deployment-id }}
          RPC_URL: ${{ secrets.RPC_URL }}
          ADMIN_PRIVATE_KEY: ${{ secrets.DATAPROTECTOR_OWNER_PRIVATEKEY }} # TODO Fix secret name
          POCO_ADDRESS: ${{ vars.POCO_ADDRESS }}
          DATASET_REGISTRY_ADDRESS: ${{ vars.DATASET_REGISTRY_ADDRESS }}
          # ENV: staging or prod
          # MANIFEST_DEFAULT_DIR: .openzeppelin/staging or .openzeppelin/prod
          # ADD_ONLY_APP_WHITELIST_REGISTRY_ADDRESS: '0xabc...'
        # TODO implement upgrade script.
        run: DEPLOYMENT_ID="$DEPLOYMENT_ID" npm run upgrade -- --network ${{ inputs.network }}

      - name: Push artifacts to the current branch
        if: inputs.network != 'hardhat' && github.ref != 'refs/heads/main'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: ${{ env.COMMIT_MESSAGE }}
          file_pattern: |
            packages/sharing-smart-contract/ignition/deployments/*
            packages/sharing-smart-contract/.openzeppelin/*
          commit_user_name: ${{ env.GHA_BOT_NAME }}
          commit_user_email: ${{ env.GHA_BOT_EMAIL }}
          commit_author: '${{ env.GHA_BOT_NAME }} <${{ env.GHA_BOT_EMAIL }}>'

      # Since the `main` branch is protected, create a PR to push artifacts.
      - name: Push artifacts through a pull request
        if: inputs.network != 'hardhat' && github.ref == 'refs/heads/main'
        uses: peter-evans/create-pull-request@v7
        with:
          commit-message: ${{ env.COMMIT_MESSAGE }}
          add-paths: |
            packages/sharing-smart-contract/ignition/deployments/
            packages/sharing-smart-contract/.openzeppelin/
          committer: '${{ env.GHA_BOT_NAME }} <${{ env.GHA_BOT_EMAIL }}>'
          author: '${{ env.GHA_BOT_NAME }} <${{ env.GHA_BOT_EMAIL }}>'
          branch: chore/save-artifacts
          title: ${{ env.COMMIT_MESSAGE }}
          body: 'PR created by "Create Pull Request" GitHub Action.'
          draft: true

      - name: Verify contracts
        if: inputs.network != 'hardhat'
        continue-on-error: true
        working-directory: packages/sharing-smart-contract
        env:
          EXPLORER_API_KEY: ${{ secrets.EXPLORER_API_KEY }}
          IS_VERIFICATION_API_V2: ${{ vars.IS_VERIFICATION_API_V2 }}
        run: npm run verify -- "$DEPLOYMENT_ID"
