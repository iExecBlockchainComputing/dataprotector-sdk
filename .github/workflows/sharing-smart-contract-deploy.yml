name: Sharing Smart Contract - Deploy

on:
  workflow_dispatch: # Manual trigger
    inputs:
      network:
        description: 'Network'
        required: true
        type: choice
        options:
          - hardhat
          - avalancheFujiTestnet
          - arbitrumSepolia
          - arbitrum
          - bellecour
        default: 'hardhat'
      stage:
        description: 'Deployment stage'
        required: true
        type: choice
        options:
          - dev
          - prod
        default: 'dev'

jobs:
  build-and-test:
    uses: ./.github/workflows/sharing-smart-contracts-ci.yml
    with:
      node-version: 20

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: ${{ inputs.network }}
    permissions:
      contents: write # Required to commit deployment files.
    env:
      CI: true
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'packages/sharing-smart-contract'

      - name: Install dependencies
        working-directory: packages/sharing-smart-contract
        run: npm ci

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable
          cache: true

      - name: Validate deployment environment and prepare variables
        if: inputs.network != 'hardhat'
        env:
          NETWORK: ${{ inputs.network }}
          STAGE: ${{ inputs.stage }}
        run: |
          case "$NETWORK" in
            arbitrum|bellecour)
              echo "IS_MAINNET=true" >> $GITHUB_ENV
              if [ "$STAGE" = "dev" ]; then
                echo "Error: Cannot deploy to mainnet ($NETWORK) with dev stage"
                exit 1
              fi
              ;;
            *)
              echo "IS_MAINNET=false" >> $GITHUB_ENV
              ;;
          esac

      - name: Deploy contracts
        id: deploy
        working-directory: packages/sharing-smart-contract
        env:
          # For Deployment
          RPC_URL: ${{ secrets.RPC_URL }}
          DEPLOYER_PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY }}
          ADMIN_PRIVATE_KEY: ${{ secrets.DATAPROTECTOR_OWNER_PRIVATEKEY }} # Fix secret name
          POCO_ADDRESS: ${{ vars.POCO_ADDRESS }}
          DATASET_REGISTRY_ADDRESS: ${{ vars.DATASET_REGISTRY_ADDRESS }}
        run: |
          if [ "${{ inputs.network }}" = "hardhat" ]; then
            npm run deploy -- --network ${{ inputs.network }}
          else
            # For testnets, use network-stage; for mainnets, use network only
            if [ "$IS_MAINNET" = false ]; then
              DEPLOYMENT_ID="${{ inputs.network }}-${{ inputs.stage }}"
            else
              DEPLOYMENT_ID="${{ inputs.network }}"
            fi
            echo "deployment-id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
            DEPLOYMENT_ID="$DEPLOYMENT_ID" \
              npm run deploy -- --network ${{ inputs.network }}
          fi

      - name: Save deployment artifacts
        if: inputs.network != 'hardhat'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'chore: save deployment artifacts for ${{ inputs.network }} ${{ inputs.stage }} (${{ github.run_id }})'
          file_pattern: 'packages/sharing-smart-contract/ignition/deployments/* packages/sharing-smart-contract/.openzeppelin/*'
          commit_user_name: 'GitHub Actions Bot'
          commit_user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_author: 'GitHub Actions Bot <github-actions[bot]@users.noreply.github.com>'

      - name: Verify contracts
        if: inputs.network != 'hardhat'
        continue-on-error: true
        working-directory: packages/sharing-smart-contract
        env:
          # For Verification
          EXPLORER_API_KEY: ${{ secrets.EXPLORER_API_KEY }}
          IS_VERIFICATION_API_V2: ${{ vars.IS_VERIFICATION_API_V2 }}
        run: |
          # For testnets, use network-stage; for mainnets, use network only
          if [ "$IS_MAINNET" = false ]; then
            DEPLOYMENT_ID="${{ inputs.network }}-${{ inputs.stage }}"
          else
            DEPLOYMENT_ID="${{ inputs.network }}"
          fi
          npm run verify -- "$DEPLOYMENT_ID"
