name: Smart Contract Deploy

on:
  workflow_dispatch: # Manually trigger the workflow OR trigger with tags or releases ?
    inputs:
      target:
        description: 'Deployment target (smart-contract-deploy-dev, smart-contract-deploy-staging, smart-contract-deploy-prod)'
        required: true
        type: choice
        options:
          - smart-contract-deploy-dev
          - smart-contract-deploy-staging
          - smart-contract-deploy-prod
        default: smart-contract-deploy-dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: packages/smart-contract
        run: |
          node -v
          npm -v
          npm ci

      - name: Check code format
        working-directory: packages/smart-contract
        run: npm run check-format

      - name: Run lint
        working-directory: packages/smart-contract
        run: npm run lint

      - name: Compile smart contracts
        working-directory: packages/smart-contract
        run: npm run compile

      - name: Run tests
        working-directory: packages/smart-contract
        run: npm run test

      - name: Deploy to dev/staging
        if: ${{ (github.event.inputs.target == 'smart-contract-deploy-dev' || github.event.inputs.target == 'smart-contract-deploy-staging') && startsWith(github.ref, 'refs/heads/main') }}
        working-directory: packages/smart-contract
        env:
          WALLET_PRIVATE_KEY: ${{ secrets.DEPLOYER_DEV_PRIVATEKEY }}
        run: npm run deploy -- --network bellecour

      - name: Deploy to prod
        if: ${{ github.event.inputs.target == 'smart-contract-deploy-prod' && github.ref == 'refs/heads/main' }}
        working-directory: packages/smart-contract
        env:
          WALLET_PRIVATE_KEY: ${{ secrets.DEPLOYER_PROD_PRIVATEKEY }}
        run: npm run deploy -- --network bellecour

      - name: Update production environment
        if: ${{ github.event.inputs.target == 'smart-contract-deploy-prod' }}
        working-directory: environments
        run: |
          ADDRESS=$(jq -r '.contractAddress' ../packages/smart-contract/ignition/deployments/chain-134/journal.jsonl)
          BLOCK=$(jq -r '.blockNumber' ../packages/smart-contract/ignition/deployments/chain-134/journal.jsonl)
          KEY=dataprotectorContractAddress VALUE=$ADDRESS npm run update-env
          KEY=dataprotectorStartBlock VALUE=$BLOCK npm run update-env
          git add environments.json
          git commit -m "Deployment ${{ github.event.inputs.target }} run ${{ github.run_number }} commit ${{ github.sha }}" --author="drone-product <team-product@iex.ec>"

      - name: Update staging environment
        if: ${{ github.event.inputs.target == 'smart-contract-deploy-staging' }}
        working-directory: environments
        run: |
          ADDRESS=$(jq -r '.contractAddress' ../packages/smart-contract/ignition/deployments/chain-134/journal.json)
          BLOCK=$(jq -r '.blockNumber' ../packages/smart-contract/ignition/deployments/chain-134/journal.json)
          KEY=dataprotectorContractAddress VALUE=$ADDRESS npm run update-env
          KEY=dataprotectorStartBlock VALUE=$BLOCK npm run update-env
          git add environments.json
          git commit -m "Deployment ${{ github.event.inputs.target }} run ${{ github.run_number }} commit ${{ github.sha }}" --author="drone-product <team-product@iex.ec>"

      - name: Git push environment update
        if: ${{ github.event.inputs.target == 'smart-contract-deploy-prod' || github.event.inputs.target == 'smart-contract-deploy-staging' }}
        run: |
          git push ssh://git@github.com/iExecBlockchainComputing/dataprotector-sdk.git update-env-${{ github.run_number }}
        env:
          # Configure the SSH key to secrets GitHub
          SSH_KEY: ${{ secrets.SSH_KEY_TEAM_PRODUCT_GITHUB_PUSH }}
        shell: bash

      - name: Verify contract
        working-directory: packages/smart-contract
        run: npm run verify -- --network bellecour $(cat deployments/DataProtector/address) $(cat deployments/DataProtector/args)
