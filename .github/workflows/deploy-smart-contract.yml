name: Smart Contract Deploy

on:
  workflow_dispatch: # Manually trigger the workflow OR trigger with tags or releases ?
    inputs:
      target:
        description: 'Deployment target (smart-contract-deploy-dev, smart-contract-deploy-staging, smart-contract-deploy-prod)'
        required: true
        type: choice
        options:
          - smart-contract-deploy-dev
          - smart-contract-deploy-staging
          - smart-contract-deploy-prod
      network:
        description: 'Network'
        required: true
        type: choice
        options:
          - hardhat
          - bellecour
          - arbitrumSepolia
          - arbitrum
        default: 'hardhat'
      dataset_registry_address:
        description: 'Dataset Registry Address'
        required: false
        type: string
        default: ''

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      CI: true
    permissions:
      contents: write # Required to commit deployment files.
    environment: ${{ inputs.network }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: packages/smart-contract
        run: |
          node -v
          npm -v
          npm ci

      - name: Check code format
        working-directory: packages/smart-contract
        run: npm run check-format

      - name: Run lint
        working-directory: packages/smart-contract
        run: npm run lint

      - name: Compile smart contracts
        working-directory: packages/smart-contract
        run: npm run compile

      - name: Run tests
        working-directory: packages/smart-contract
        run: npm run test

      - name: Deploy contracts
        env:
          # For Deployment
          HARDHAT_IGNITION_CONFIRM_DEPLOYMENT: false
          WALLET_PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY }}
          DATASET_REGISTRY_ADDRESS: ${{ inputs.dataset_registry_address }}
          RPC_URL: ${{ secrets.RPC_URL }}
        run: |
            npm run deploy -- --network ${{ inputs.network }} --deployment-id ${{ inputs.network }}

      - name: Update production environment
        if: ${{ github.event.inputs.target == 'smart-contract-deploy-prod' }}
        working-directory: environments
        run: |
          ADDRESS=$(jq -r '.contractAddress' ../packages/smart-contract/ignition/deployments/chain-134/journal.jsonl)
          BLOCK=$(jq -r '.blockNumber' ../packages/smart-contract/ignition/deployments/chain-134/journal.jsonl)
          KEY=dataprotectorContractAddress VALUE=$ADDRESS npm run update-env
          KEY=dataprotectorStartBlock VALUE=$BLOCK npm run update-env
          git add environments.json
          git commit -m "Deployment ${{ github.event.inputs.target }} run ${{ github.run_number }} commit ${{ github.sha }}" --author="drone-product <team-product@iex.ec>"

      - name: Update staging environment
        if: ${{ github.event.inputs.target == 'smart-contract-deploy-staging' }}
        working-directory: environments
        run: |
          ADDRESS=$(jq -r '.contractAddress' ../packages/smart-contract/ignition/deployments/chain-134/journal.json)
          BLOCK=$(jq -r '.blockNumber' ../packages/smart-contract/ignition/deployments/chain-134/journal.json)
          KEY=dataprotectorContractAddress VALUE=$ADDRESS npm run update-env
          KEY=dataprotectorStartBlock VALUE=$BLOCK npm run update-env
          git add environments.json
          git commit -m "Deployment ${{ github.event.inputs.target }} run ${{ github.run_number }} commit ${{ github.sha }}" --author="drone-product <team-product@iex.ec>"

      - name: Git push environment update
        if: ${{ github.event.inputs.target == 'smart-contract-deploy-prod' || github.event.inputs.target == 'smart-contract-deploy-staging' }}
        run: |
          git push ssh://git@github.com/iExecBlockchainComputing/dataprotector-sdk.git update-env-${{ github.run_number }}
        env:
          # Configure the SSH key to secrets GitHub
          SSH_KEY: ${{ secrets.SSH_KEY_TEAM_PRODUCT_GITHUB_PUSH }}
        shell: bash

      - name: Verify contracts
        if: inputs.network != 'hardhat'
        continue-on-error: true
        env:
          # For Verification
          EXPLORER_API_KEY: ${{ secrets.EXPLORER_API_KEY }}
          IS_VERIFICATION_API_V2: ${{ vars.IS_VERIFICATION_API_V2  }}
        run: sleep 10 && npm run verify -- ${{ inputs.network }}

      - name: Log verification result
        if: inputs.network != 'hardhat'
        run: |
          if [ $? -eq 0 ]; then
            echo "✅ Contract verification completed successfully"
          else
            echo "⚠️  Contract verification failed, but deployment was successful"
            echo "You may need to verify the contract manually"
          fi
