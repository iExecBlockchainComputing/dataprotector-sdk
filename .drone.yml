kind: pipeline
type: docker
name: root checks

trigger:
  event:
    - pull_request

steps:
  - name: cat-drone-consider
    image: node:18.19
    commands:
      - cat .drone-consider

  - name: check-sdk-abi
    image: node:18.19
    commands:
      - cd packages/sdk
      - npm run refresh-abis
      - |
        if [ -n "$(git diff --name-only)" ]; then
          echo "ABIs not up-to-date in packages/sdk, need to run 'npm run refresh-abis'"
          exit 1
        fi

  - name: check-subgraph-abi
    image: node:18.19
    commands:
      - cd packages/subgraph
      - npm run refresh-abis
      - |
        if [ -n "$(git diff --name-only)" ]; then
          echo "ABIs not up-to-date in packages/subgraph, need to run 'npm run refresh-abis'"
          exit 1
        fi

  - name: check-dapp-abi
    image: node:18.19
    commands:
      - cd packages/protected-data-delivery-dapp/deployment
      - npm run refresh-abis
      - |
        if [ -n "$(git diff --name-only)" ]; then
          echo "ABIs not up-to-date in protected-data-delivery-dapp/abis, need to run 'npm run refresh-abis'"
          exit 1
        fi

---
# deploy DataProtector smart contract to prod, dev or staging
kind: pipeline
type: docker
name: smart-contract deploy

trigger:
  event:
    - promote
  target:
    # deploy and verify the DataProtector contract with the dev deployer
    - smart-contract-deploy-dev
    # deploy and verify the DataProtector contract with the dev deployer and commit the staging environment update
    - smart-contract-deploy-staging
    # deploy and verify the DataProtector contract with the prod deployer and commit the prod environment update
    - smart-contract-deploy-prod
  branch:
    - develop
    - main

steps:
  - name: install deps
    image: node:18.19
    pull: always
    commands:
      - cd packages/smart-contract
      - node -v
      - npm -v
      - npm ci

  - name: check format
    image: node:18.19
    commands:
      - cd packages/smart-contract
      - npm run check-format

  - name: check lint
    image: node:18.19
    commands:
      - cd packages/smart-contract
      - npm run lint

  - name: compile smart contracts
    image: node:18.19
    commands:
      - cd packages/smart-contract
      - npm run compile

  - name: test smart contracts
    image: node:18.19
    commands:
      - cd packages/smart-contract
      - npm run test

  - name: smart-contract dev/staging deployment
    image: node:18.19
    environment:
      WALLET_PRIVATE_KEY:
        from_secret: deployer-dev-privatekey
    commands:
      - cd packages/smart-contract
      - npm run deploy -- --network bellecour
    when:
      target:
        - smart-contract-deploy-staging
        - smart-contract-deploy-dev
      branch:
        - develop

  - name: smart-contract prod deployment
    image: node:18.19
    environment:
      WALLET_PRIVATE_KEY:
        from_secret: deployer-prod-privatekey
    commands:
      - cd packages/smart-contract
      - npm run deploy -- --network bellecour
    when:
      target:
        - smart-contract-deploy-prod
      branch:
        - main

  - name: update prod env
    image: node:18.19
    environment:
      ENV: prod
    commands:
      - cd environments
      - KEY=dataprotectorContractAddress VALUE=$(cat ../packages/smart-contract/deployments/DataProtector/address) npm run update-env
      - KEY=dataprotectorStartBlock VALUE=$(cat ../packages/smart-contract/deployments/DataProtector/block) npm run update-env
      - git add environments.json
      - git commit -m "$DRONE_DEPLOY_TO deployment $DRONE_BUILD_NUMBER $DRONE_COMMIT" --author="drone-product <team-product@iex.ec>"
    when:
      target:
        - smart-contract-deploy-prod

  - name: update staging env
    image: node:18.19
    environment:
      ENV: staging
    commands:
      - cd environments
      - KEY=dataprotectorContractAddress VALUE=$(cat ../packages/smart-contract/deployments/DataProtector/address) npm run update-env
      - KEY=dataprotectorStartBlock VALUE=$(cat ../packages/smart-contract/deployments/DataProtector/block) npm run update-env
      - git add environments.json
      - git commit -m "$DRONE_DEPLOY_TO deployment $DRONE_BUILD_NUMBER $DRONE_COMMIT" --author="drone-product <team-product@iex.ec>"
    when:
      target:
        - smart-contract-deploy-staging

  - name: git-push
    image: appleboy/drone-git-push
    settings:
      remote: ssh://git@github.com/iExecBlockchainComputing/dataprotector-sdk.git
      branch: update-env-${DRONE_BUILD_NUMBER}
      ssh_key:
        from_secret: ssh-key-team-product-github-push
    when:
      target:
        - smart-contract-deploy-prod
        - smart-contract-deploy-staging

  - name: verify contract
    image: node:18.19
    commands:
      - cd packages/smart-contract
      - npm run verify -- --network bellecour $(cat deployments/DataProtector/address) $(cat deployments/DataProtector/args)

---
# deploy sharing smart contract to prod, staging or dev
kind: pipeline
type: docker
name: sharing-smart-contract deploy

trigger:
  event:
    - promote
  target:
    # deploy and verify the AddOnlyAppWhitelistRegistry and DataProtectorSharing contracts with the dev deployer
    - sharing-smart-contract-deploy-dev
    # deploy and verify the AddOnlyAppWhitelistRegistry and DataProtectorSharing contracts with the dev deployer, configure DataProtectorSharing for staging and commit the staging environment update
    - sharing-smart-contract-deploy-staging
    # deploy and verify the AddOnlyAppWhitelistRegistry and DataProtectorSharing contracts with the prod deployer and commit the prod environment update
    - sharing-smart-contract-deploy-prod
  branch:
    - develop
    - main

steps:
  - name: install-deps
    image: node:18.19
    pull: always
    commands:
      - cd packages/sharing-smart-contract
      - node -v
      - npm -v
      - npm ci

  - name: install-forge
    image: node:18.19
    pull: always
    commands:
      - export XDG_CONFIG_HOME=/drone/src
      - curl -L https://foundry.paradigm.xyz | bash
      - export PATH="$PATH:/drone/src/.foundry/bin"
      - foundryup
      - cd packages/sharing-smart-contract
      - forge install foundry-rs/forge-std --no-git

  - name: bellecour-fork
    detach: true
    image: ghcr.io/foundry-rs/foundry:latest
    pull: always
    expose:
      - 8545
    commands:
      - anvil --host 0.0.0.0 --port 8545 --hardfork berlin --fork-url https://bellecour.iex.ec --chain-id 134 --gas-limit 6700000 --gas-price 0

  - name: bellecour-fork-healthy
    image: bash
    commands:
      - while ! nc -z bellecour-fork 8545 ; do sleep 1 ; done && echo "bellecour-fork ready"
    depends_on:
      - bellecour-fork

  - name: compile
    image: node:18.19
    commands:
      - cd packages/sharing-smart-contract
      - export PATH="$PATH:/drone/src/.foundry/bin"
      - npm run compile
    depends_on:
      - install-forge
      - install-deps

  - name: check format
    image: node:18.19
    commands:
      - cd packages/sharing-smart-contract
      - npm run check-format
    depends_on:
      - install-deps

  - name: lint
    image: node:18.19
    commands:
      - cd packages/sharing-smart-contract
      - npm run lint
    depends_on:
      - install-deps

  - name: uml-diagrams
    image: node:18.19
    commands:
      - cd packages/sharing-smart-contract
      - npm run uml
    depends_on:
      - install-deps

  - name: static-analyzer
    image: node:18.19
    commands:
      - cd packages/sharing-smart-contract
      - git clone https://github.com/Picodes/4naly3er.git
      - cd 4naly3er
      - git reset --hard HEAD~1 # FIX issue https://github.com/Picodes/4naly3er/issues/48
      - yarn install
      - yarn analyze ../contracts
    depends_on:
      - compile
      - lint

  - name: hardhat-tests
    image: node:18.19
    commands:
      - cd packages/sharing-smart-contract
      - export PATH="$PATH:/drone/src/.foundry/bin"
      - npm run test -- --network ci-bellecour-fork
    depends_on:
      - install-deps
      - install-forge
      - compile
      - bellecour-fork-healthy

  - name: forge-tests
    image: node:18.19
    commands:
      - cd packages/sharing-smart-contract
      - export PATH="$PATH:/drone/src/.foundry/bin"
      - forge test --no-match-test "invariant" -vvvvv
    depends_on:
      - install-deps
      - install-forge
      - compile
      - bellecour-fork-healthy

  - name: smart-contract-dev-deployment
    image: node:18.19
    environment:
      WALLET_PRIVATE_KEY:
        from_secret: deployer-dev-privatekey
    commands:
      - cd packages/sharing-smart-contract
      - export PATH="$PATH:/drone/src/.foundry/bin"
      - npm run deploy -- --network bellecour
    depends_on:
      - compile
      - forge-tests
      - hardhat-tests
    when:
      target:
        - sharing-smart-contract-deploy-dev
      branch:
        - develop

  - name: smart-contract-staging-deployment
    image: node:18.19
    environment:
      WALLET_PRIVATE_KEY:
        from_secret: deployer-dev-privatekey
      ENV: staging
      MANIFEST_DEFAULT_DIR: .openzeppelin/staging
    commands:
      - cd packages/sharing-smart-contract
      - export PATH="$PATH:/drone/src/.foundry/bin"
      - npm run deploy -- --network bellecour
      - git add .openzeppelin
    depends_on:
      - compile
      - forge-tests
      - hardhat-tests
    when:
      target:
        - sharing-smart-contract-deploy-staging
      branch:
        - develop

  - name: smart-contract-prod-deployment
    image: node:18.19
    environment:
      WALLET_PRIVATE_KEY:
        from_secret: deployer-prod-privatekey
      MANIFEST_DEFAULT_DIR: .openzeppelin/prod
    commands:
      - cd packages/sharing-smart-contract
      - export PATH="$PATH:/drone/src/.foundry/bin"
      - npm run deploy -- --network bellecour
      - git add .openzeppelin
    depends_on:
      - compile
      - forge-tests
      - hardhat-tests
    when:
      target:
        - sharing-smart-contract-deploy-prod
      branch:
        - main

  - name: update-prod-env
    image: node:18.19
    environment:
      ENV: prod
    commands:
      - cd environments
      - KEY=dataprotectorSharingContractAddress VALUE=$(cat ../packages/sharing-smart-contract/deployments/DataProtectorSharing/address) npm run update-env
      - KEY=dataprotectorSharingStartBlock VALUE=$(cat ../packages/sharing-smart-contract/deployments/DataProtectorSharing/block) npm run update-env
      - KEY=addOnlyAppWhitelistRegistryContractAddress VALUE=$(cat ../packages/sharing-smart-contract/deployments/AddOnlyAppWhitelistRegistry/address) npm run update-env
      - KEY=addOnlyAppWhitelistRegistryStartBlock VALUE=$(cat ../packages/sharing-smart-contract/deployments/AddOnlyAppWhitelistRegistry/block) npm run update-env
      - git add environments.json
      - git commit -m "$DRONE_DEPLOY_TO deployment $DRONE_BUILD_NUMBER $DRONE_COMMIT" --author="drone-product <team-product@iex.ec>"
    when:
      target:
        - sharing-smart-contract-deploy-prod
    depends_on:
      - smart-contract-prod-deployment

  - name: update-staging-env
    image: node:18.19
    environment:
      ENV: staging
    commands:
      - cd environments
      - KEY=dataprotectorSharingContractAddress VALUE=$(cat ../packages/sharing-smart-contract/deployments/DataProtectorSharing/address) npm run update-env
      - KEY=dataprotectorSharingStartBlock VALUE=$(cat ../packages/sharing-smart-contract/deployments/DataProtectorSharing/block) npm run update-env
      - KEY=addOnlyAppWhitelistRegistryContractAddress VALUE=$(cat ../packages/sharing-smart-contract/deployments/AddOnlyAppWhitelistRegistry/address) npm run update-env
      - KEY=addOnlyAppWhitelistRegistryStartBlock VALUE=$(cat ../packages/sharing-smart-contract/deployments/AddOnlyAppWhitelistRegistry/block) npm run update-env
      - git add environments.json
      - git commit -m "$DRONE_DEPLOY_TO deployment $DRONE_BUILD_NUMBER $DRONE_COMMIT" --author="drone-product <team-product@iex.ec>"
    when:
      target:
        - sharing-smart-contract-deploy-staging
    depends_on:
      - smart-contract-staging-deployment

  - name: smart-contract-staging-update-env
    image: node:18.19
    environment:
      WALLET_PRIVATE_KEY:
        # TODO replace by dataprotector-admin-dev-privatekey
        from_secret: deployer-dev-privatekey
      ENV: staging
    commands:
      - cd packages/sharing-smart-contract
      - export PATH="$PATH:/drone/src/.foundry/bin"
      - npm run update-env -- --network bellecour
    depends_on:
      # relies on environments.json
      - update-staging-env
    when:
      target:
        - sharing-smart-contract-deploy-staging
      branch:
        - develop

  - name: git-push
    image: appleboy/drone-git-push
    settings:
      remote: ssh://git@github.com/iExecBlockchainComputing/dataprotector-sdk.git
      branch: update-env-${DRONE_BUILD_NUMBER}
      ssh_key:
        from_secret: ssh-key-team-product-github-push
    when:
      target:
        - sharing-smart-contract-deploy-prod
        - sharing-smart-contract-deploy-staging
    depends_on:
      - update-prod-env
      - update-staging-env
      - smart-contract-staging-update-env

---
# pipeline to updateEnv in DataProtectorSharing SC
kind: pipeline
type: docker
name: sharing-smart-contract update-env

trigger:
  event:
    - promote
  target:
    # configure the staging DataProtectorSharing contract to use the staging environment
    - sharing-smart-contract-update-env-staging
    # configure the prod DataProtectorSharing contract to use the prod environment
    - sharing-smart-contract-update-env-prod
  branch:
    - develop
    - main

steps:
  - name: install-deps
    image: node:18.19
    pull: always
    commands:
      - cd packages/sharing-smart-contract
      - npm ci

  - name: install-forge
    image: node:18.19
    pull: always
    commands:
      - export XDG_CONFIG_HOME=/drone/src
      - curl -L https://foundry.paradigm.xyz | bash
      - export PATH="$PATH:/drone/src/.foundry/bin"
      - foundryup
      - forge install foundry-rs/forge-std --no-git

  - name: smart-contract-staging-update-env
    image: node:18.19
    environment:
      WALLET_PRIVATE_KEY:
        # TODO replace by dataprotector-admin-dev-privatekey
        from_secret: deployer-dev-privatekey
      ENV: staging
    commands:
      - cd packages/sharing-smart-contract
      - export PATH="$PATH:/drone/src/.foundry/bin"
      - npm run update-env -- --network bellecour
    depends_on:
      - install-forge
      - install-deps
    when:
      target:
        - sharing-smart-contract-update-env-staging
      branch:
        - develop

  - name: smart-contract-prod-update-env
    image: node:18.19
    environment:
      WALLET_PRIVATE_KEY:
        # TODO replace by dataprotector-admin-prod-privatekey
        from_secret: deployer-prod-privatekey
      ENV: prod
    commands:
      - cd packages/sharing-smart-contract
      - export PATH="$PATH:/drone/src/.foundry/bin"
      - npm run update-env -- --network bellecour
    depends_on:
      - install-forge
      - install-deps
    when:
      target:
        - sharing-smart-contract-update-env-prod
      branch:
        - main

---
# pipeline to upgrade the DataProtectorSharing SC
kind: pipeline
type: docker
name: sharing-smart-contract upgrade

trigger:
  event:
    - promote
  target:
    # upgrade the staging DataProtectorSharing contract with the new implementation
    - sharing-smart-contract-upgrade-staging
    # # upgrade the prod DataProtectorSharing contract with the new implementation
    # - sharing-smart-contract-upgrade-prod
  branch:
    - develop
    - main

steps:
  - name: install-deps
    image: node:18.19
    pull: always
    commands:
      - cd packages/sharing-smart-contract
      - npm ci

  - name: install-forge
    image: node:18.19
    pull: always
    commands:
      - export XDG_CONFIG_HOME=/drone/src
      - curl -L https://foundry.paradigm.xyz | bash
      - export PATH="$PATH:/drone/src/.foundry/bin"
      - foundryup
      - forge install foundry-rs/forge-std --no-git

  - name: smart-contract-staging-upgrade
    image: node:18.19
    environment:
      WALLET_PRIVATE_KEY:
        # TODO replace by dataprotector-admin-dev-privatekey
        from_secret: deployer-dev-privatekey
      ENV: staging
      MANIFEST_DEFAULT_DIR: .openzeppelin/staging
    commands:
      - cd packages/sharing-smart-contract
      - export PATH="$PATH:/drone/src/.foundry/bin"
      - npm run upgrade -- --network bellecour
      - git add .openzeppelin
      - git commit -m "$DRONE_DEPLOY_TO deployment $DRONE_BUILD_NUMBER $DRONE_COMMIT" --author="drone-product <team-product@iex.ec>"
    depends_on:
      - install-forge
      - install-deps
    when:
      target:
        - sharing-smart-contract-upgrade-staging
      branch:
        - develop

  # - name: smart-contract-prod-upgrade
  #   image: node:18.19
  #   environment:
  #     WALLET_PRIVATE_KEY:
  #       # TODO replace by dataprotector-admin-prod-privatekey
  #       from_secret: deployer-prod-privatekey
  #     ENV: prod
  #     MANIFEST_DEFAULT_DIR: .openzeppelin/prod
  #   commands:
  #     - cd packages/sharing-smart-contract
  #     - export PATH="$PATH:/drone/src/.foundry/bin"
  #     - npm run upgrade -- --network bellecour
  #     - git add .openzeppelin
  #     - git commit -m "$DRONE_DEPLOY_TO deployment $DRONE_BUILD_NUMBER $DRONE_COMMIT" --author="drone-product <team-product@iex.ec>"
  #   depends_on:
  #     - install-forge
  #     - install-deps
  #   when:
  #     target:
  #       - sharing-smart-contract-upgrade-prod
  #     branch:
  #       - main

  - name: git-push
    image: appleboy/drone-git-push
    settings:
      remote: ssh://git@github.com/iExecBlockchainComputing/dataprotector-sdk.git
      branch: update-env-${DRONE_BUILD_NUMBER}
      ssh_key:
        from_secret: ssh-key-team-product-github-push
    depends_on:
      - smart-contract-staging-upgrade
      # - smart-contract-prod-upgrade

---
kind: pipeline
type: docker
name: subgraph deploy

trigger:
  event:
    - promote
  target:
    # deploy the dataprotector subgraph
    - subgraph-deploy-dev
    # deploy the dataprotector subgraph for the staging environment
    - subgraph-deploy-staging
    # deploy the dataprotector subgraph for the prod environment
    - subgraph-deploy-prod
  branch:
    - develop
    - main

steps:
  - name: deploy-v2-dev
    image: node:18.19
    params:
      - START_BLOCK
    environment:
      GRAPHNODE_URL:
        from_secret: graphnode-url
      IPFS_URL:
        from_secret: ipfs-url
      ENV: prod
    commands:
      - cd packages/subgraph
      - export SUBGRAPH_NAME=bellecour/dev-dataprotector-v2
      - echo "deploying commit $DRONE_COMMIT on subgraph $SUBGRAPH_NAME"
      - npm ci
      - npm run codegen
      - npm run build
      - npx graph create --node $GRAPHNODE_URL $SUBGRAPH_NAME
      - npx graph deploy --node $GRAPHNODE_URL $SUBGRAPH_NAME --ipfs $IPFS_URL --version-label $DRONE_COMMIT
    when:
      target:
        - subgraph-deploy-dev
      branch:
        - develop

  - name: deploy-v2-prod
    image: node:18.19
    params:
      - START_BLOCK
    environment:
      GRAPHNODE_URL:
        from_secret: graphnode-url
      IPFS_URL:
        from_secret: ipfs-url
      ENV: prod
    commands:
      - cd packages/subgraph
      - export SUBGRAPH_NAME=bellecour/dataprotector-v2
      - echo "deploying commit $DRONE_COMMIT on subgraph $SUBGRAPH_NAME"
      - npm ci
      - npm run codegen
      - npm run build
      - npx graph create --node $GRAPHNODE_URL $SUBGRAPH_NAME
      - npx graph deploy --node $GRAPHNODE_URL $SUBGRAPH_NAME --ipfs $IPFS_URL --version-label $(npm pkg get version)
    when:
      target:
        - subgraph-deploy-prod
      branch:
        - main

  - name: deploy-v2-staging
    image: node:18.19
    params:
      - START_BLOCK
    environment:
      GRAPHNODE_URL:
        from_secret: graphnode-url
      IPFS_URL:
        from_secret: ipfs-url
      ENV: staging
    commands:
      - cd packages/subgraph
      - export SUBGRAPH_NAME=bellecour/staging-dataprotector-v2
      - echo "deploying commit $DRONE_COMMIT on subgraph $SUBGRAPH_NAME"
      - npm ci
      - npm run codegen
      - npm run build
      - npx graph create --node $GRAPHNODE_URL $SUBGRAPH_NAME
      - npx graph deploy --node $GRAPHNODE_URL $SUBGRAPH_NAME --ipfs $IPFS_URL --version-label $(npm pkg get version)
    when:
      target:
        - subgraph-deploy-staging
      branch:
        - develop

---
#pipeline to deploy app whitelist on iexec
kind: pipeline
type: docker
name: protected-data-delivery-dapp deploy whitelist

trigger:
  event:
    - promote
  target:
    # deploy a whitelist for the protected-data-delivery-dapp on the staging env
    - protected-data-delivery-dapp-deploy-app-whitelist-staging
    # deploy a whitelist for the protected-data-delivery-dapp on the prod env
    - protected-data-delivery-dapp-deploy-app-whitelist-prod
  branch:
    - develop
    - main

steps:
  - name: install deps
    image: node:18.19
    pull: always
    commands:
      - cd packages/protected-data-delivery-dapp/deployment
      - npm ci

  - name: create app whitelist prod
    image: node:18.19
    pull: always
    environment:
      ENV: prod
      WALLET_PRIVATE_KEY:
        from_secret: protectedDataSharing-dapp-prod-privatekey
    commands:
      - cd packages/protected-data-delivery-dapp/deployment
      - npm run create-app-whitelist
    when:
      target:
        - protected-data-delivery-dapp-deploy-app-whitelist-prod
      branch:
        - main

  - name: create app whitelist staging
    image: node:18.19
    pull: always
    environment:
      ENV: staging
      WALLET_PRIVATE_KEY:
        from_secret: protectedDataSharing-dapp-dev-privatekey
    commands:
      - cd packages/protected-data-delivery-dapp/deployment
      - npm run create-app-whitelist
    when:
      target:
        - protected-data-delivery-dapp-deploy-app-whitelist-staging
      branch:
        - develop

  - name: update prod env
    image: node:18.19
    environment:
      ENV: prod
    commands:
      - cd environments
      - KEY=protectedDataDeliveryWhitelistAddress VALUE=$(cat ../packages/protected-data-delivery-dapp/deployment/.app-whitelist-address) npm run update-env
      - git add environments.json
      - git commit -m "$DRONE_DEPLOY_TO deployment $DRONE_BUILD_NUMBER $DRONE_COMMIT" --author="drone-product <team-product@iex.ec>"
    when:
      target:
        - protected-data-delivery-dapp-deploy-app-whitelist-prod
      branch:
        - main

  - name: update staging env
    image: node:18.19
    environment:
      ENV: staging
    commands:
      - cd environments
      - KEY=protectedDataDeliveryWhitelistAddress VALUE=$(cat ../packages/protected-data-delivery-dapp/deployment/.app-whitelist-address) npm run update-env
      - git add environments.json
      - git commit -m "$DRONE_DEPLOY_TO deployment $DRONE_BUILD_NUMBER $DRONE_COMMIT" --author="drone-product <team-product@iex.ec>"
    when:
      target:
        - protected-data-delivery-dapp-deploy-app-whitelist-staging
      branch:
        - develop

  - name: git-push
    image: appleboy/drone-git-push
    settings:
      remote: ssh://git@github.com/iExecBlockchainComputing/dataprotector-sdk.git
      branch: update-env-${DRONE_BUILD_NUMBER}
      ssh_key:
        from_secret: ssh-key-team-product-github-push
    when:
      target:
        - protected-data-delivery-dapp-deploy-app-whitelist-staging
        - protected-data-delivery-dapp-deploy-app-whitelist-prod

---
# dapp content-creator: build non-scone (non-tee) docker image & publish on docker-regis (dev)
kind: pipeline
type: docker
name: protected-data-delivery-dapp publish non-tee docker image

trigger:
  event:
    - promote
  target:
    # build the protected-data-delivery-dapp non-tee docker image for dev
    - protected-data-delivery-dapp-docker-non-tee-dev
    # build the protected-data-delivery-dapp non-tee docker image for staging
    - protected-data-delivery-dapp-docker-non-tee-staging
    # build the protected-data-delivery-dapp non-tee docker image for prod
    - protected-data-delivery-dapp-docker-non-tee-prod
  branch:
    - develop
    - main

steps:
  - name: install-dependencies
    image: node:14-alpine3.11
    pull: always
    commands:
      - cd packages/protected-data-delivery-dapp
      - node -v
      - npm -v
      - npm ci

  - name: format
    image: node:14-alpine3.11
    commands:
      - cd packages/protected-data-delivery-dapp
      - npm run check-format

  - name: lint
    image: node:18.19
    commands:
      - cd packages/protected-data-delivery-dapp
      - npm run lint

  - name: set-prod-tag-from-package
    image: node:18.19
    # generates the .tags file for the docker plugin
    commands:
      - cd packages/protected-data-delivery-dapp
      - npm pkg get version | sed 's/"//g' > ../../.tags
    when:
      branch:
        - main
      target:
        - protected-data-delivery-dapp-docker-non-tee-prod

  - name: set-staging-tag
    image: node:18.19
    # generates the .tags file for the docker plugin
    commands:
      - cd packages/protected-data-delivery-dapp
      - echo "staging-$DRONE_COMMIT" > ../../.tags
    when:
      branch:
        - develop
        - main
      target:
        - protected-data-delivery-dapp-docker-non-tee-staging

  - name: publish-dev-non-tee-docker-image
    # plugin doc https://plugins.drone.io/plugins/docker and repo https://github.com/drone-plugins/drone-docker
    image: plugins/docker
    pull: always
    settings:
      context: packages/protected-data-delivery-dapp
      dockerfile: packages/protected-data-delivery-dapp/Dockerfile
      registry: docker-regis.iex.ec
      repo: docker-regis.iex.ec/product/protected-data-delivery-dapp
      pull_image: true
      username:
        from_secret: nexus-user
      password:
        from_secret: nexus-password
      tags:
        - dev
        - 'dev-${DRONE_COMMIT}'
    when:
      branch:
        - develop
      target:
        - protected-data-delivery-dapp-docker-non-tee-dev

  - name: publish-prod/staging-non-tee-docker-image
    # plugin doc https://plugins.drone.io/plugins/docker and repo https://github.com/drone-plugins/drone-docker
    image: plugins/docker
    pull: always
    settings:
      context: packages/protected-data-delivery-dapp
      dockerfile: packages/protected-data-delivery-dapp/Dockerfile
      # tag comes from .tags file
      registry: docker-regis.iex.ec
      repo: docker-regis.iex.ec/product/protected-data-delivery-dapp
      pull_image: true
      username:
        from_secret: nexus-user
      password:
        from_secret: nexus-password
    when:
      branch:
        - develop
        - main
      target:
        - protected-data-delivery-dapp-docker-non-tee-staging
        - protected-data-delivery-dapp-docker-non-tee-prod

---
#pipeline to deploy dapp on iexec
kind: pipeline
type: docker
name: protected-data-delivery-dapp deploy iexec dapp

trigger:
  event:
    - promote
  target:
    # deploy the tee protected-data-delivery-dapp add it to the staging app whitelist and register the ENS for staging environment
    - protected-data-delivery-dapp-deploy-staging
    # deploy the tee protected-data-delivery-dapp add it to the prod app whitelist and register the ENS for prod environment
    - protected-data-delivery-dapp-deploy-prod
  branch:
    - develop
    - main

steps:
  - name: install deps
    image: node:18.19
    pull: always
    commands:
      - cd packages/protected-data-delivery-dapp/deployment
      - npm ci

  - name: format
    image: node:18.19
    commands:
      - cd packages/protected-data-delivery-dapp/deployment
      - npm run check-format

  - name: lint
    image: node:18.19
    commands:
      - cd packages/protected-data-delivery-dapp/deployment
      - npm run lint

  - name: get scone fingerprint (prod)
    # /!\: maintain the version here
    image: iexechub/protected-data-delivery-dapp:1.0.0-sconify-5.7.5-v12-production
    commands:
      - SCONE_HASH=1 node > packages/protected-data-delivery-dapp/deployment/.scone-fingerprint
    when:
      target:
        - protected-data-delivery-dapp-deploy-prod
      branch:
        - main

  - name: deploy dapp prod
    image: node:18.19
    pull: always
    environment:
      ENV: prod
      WALLET_PRIVATE_KEY:
        from_secret: protectedDataSharing-dapp-prod-privatekey
    commands:
      - cd packages/protected-data-delivery-dapp/deployment
      - npm run deploy-app
    when:
      target:
        - protected-data-delivery-dapp-deploy-prod
      branch:
        - main

  - name: get scone fingerprint (staging)
    image: iexechub/protected-data-delivery-dapp:${DOCKER_IMAGE_TAG:-staging-${DRONE_COMMIT}-sconify-5.7.5-v12-production}
    commands:
      - SCONE_HASH=1 node > packages/protected-data-delivery-dapp/deployment/.scone-fingerprint
    params:
      # TODO: check usage (redeploy a previously sconified version)
      - DOCKER_IMAGE_TAG
    when:
      target:
        - protected-data-delivery-dapp-deploy-staging
      branch:
        - develop

  - name: deploy dapp staging
    image: node:18.19
    pull: always
    environment:
      ENV: staging
      WALLET_PRIVATE_KEY:
        from_secret: protectedDataSharing-dapp-dev-privatekey
    params:
      # TODO: check usage (redeploy a previously sconified version)
      - DOCKER_IMAGE_TAG
    commands:
      - cd packages/protected-data-delivery-dapp/deployment
      - npm run deploy-app
    when:
      target:
        - protected-data-delivery-dapp-deploy-staging
      branch:
        - develop

  - name: update prod env
    image: node:18.19
    environment:
      ENV: prod
    commands:
      - cd environments
      - KEY=protectedDataDeliveryDappAddress VALUE=$(cat ../packages/protected-data-delivery-dapp/deployment/.app-address) npm run update-env
      - git add environments.json
      - git commit -m "$DRONE_DEPLOY_TO deployment $DRONE_BUILD_NUMBER $DRONE_COMMIT" --author="drone-product <team-product@iex.ec>"
    when:
      target:
        - protected-data-delivery-dapp-deploy-prod
      branch:
        - main

  - name: update staging env
    image: node:18.19
    environment:
      ENV: staging
    commands:
      - cd environments
      - KEY=protectedDataDeliveryDappAddress VALUE=$(cat ../packages/protected-data-delivery-dapp/deployment/.app-address) npm run update-env
      - git add environments.json
      - git commit -m "$DRONE_DEPLOY_TO deployment $DRONE_BUILD_NUMBER $DRONE_COMMIT" --author="drone-product <team-product@iex.ec>"
    when:
      target:
        - protected-data-delivery-dapp-deploy-staging
      branch:
        - develop

  - name: add app to prod whitelist
    image: node:18.19
    pull: always
    environment:
      ENV: prod
      WALLET_PRIVATE_KEY:
        from_secret: protectedDataSharing-dapp-prod-privatekey
    commands:
      - cd packages/protected-data-delivery-dapp/deployment
      - npm run add-app-to-whitelist
    when:
      target:
        - protected-data-delivery-dapp-deploy-prod
      branch:
        - main

  - name: add app to staging whitelist
    image: node:18.19
    pull: always
    environment:
      ENV: staging
      WALLET_PRIVATE_KEY:
        from_secret: protectedDataSharing-dapp-dev-privatekey
    commands:
      - cd packages/protected-data-delivery-dapp/deployment
      - npm run add-app-to-whitelist
    when:
      target:
        - protected-data-delivery-dapp-deploy-staging
      branch:
        - develop

  - name: configure ENS prod
    image: node:18.19
    pull: always
    environment:
      ENV: prod
      WALLET_PRIVATE_KEY:
        from_secret: protectedDataSharing-dapp-prod-privatekey
    commands:
      - cd packages/protected-data-delivery-dapp/deployment
      - npm run configure-app-ens
    when:
      target:
        - protected-data-delivery-dapp-deploy-prod
      branch:
        - main

  - name: configure ENS staging
    image: node:18.19
    pull: always
    environment:
      ENV: staging
      WALLET_PRIVATE_KEY:
        from_secret: protectedDataSharing-dapp-dev-privatekey
    commands:
      - cd packages/protected-data-delivery-dapp/deployment
      - npm run configure-app-ens
    when:
      target:
        - protected-data-delivery-dapp-deploy-staging
      branch:
        - develop

  - name: transfer prod app to sharing contract
    image: node:18.19
    pull: always
    environment:
      ENV: prod
      WALLET_PRIVATE_KEY:
        from_secret: protectedDataSharing-dapp-prod-privatekey
    commands:
      - cd packages/protected-data-delivery-dapp/deployment
      - npm run transfer-app-to-sharing-contract
    when:
      target:
        - protected-data-delivery-dapp-deploy-prod
      branch:
        - main

  - name: transfer staging app to sharing contract
    image: node:18.19
    pull: always
    environment:
      ENV: staging
      WALLET_PRIVATE_KEY:
        from_secret: protectedDataSharing-dapp-dev-privatekey
    commands:
      - cd packages/protected-data-delivery-dapp/deployment
      - npm run transfer-app-to-sharing-contract
    when:
      target:
        - protected-data-delivery-dapp-deploy-staging
      branch:
        - develop

  - name: git-push
    image: appleboy/drone-git-push
    settings:
      remote: ssh://git@github.com/iExecBlockchainComputing/dataprotector-sdk.git
      branch: update-env-${DRONE_BUILD_NUMBER}
      ssh_key:
        from_secret: ssh-key-team-product-github-push
    when:
      target:
        - protected-data-delivery-dapp-deploy-prod
        - protected-data-delivery-dapp-deploy-staging

---
kind: pipeline
type: docker
name: sdk publish npm

trigger:
  event:
    - promote
  target:
    # publish the package @iexec/dataprotector on npm with the tag beta (require sdk version to be [version]-beta.[b])
    - sdk-publish-beta
    # publish the package @iexec/dataprotector on npm with the tag latest
    - sdk-publish-latest
  branch:
    - main

steps:
  - name: install
    image: node:18.19
    pull: always
    commands:
      - node -v
      - npm -v
      - cd packages/sdk
      - npm ci
      - npm run codegen

  - name: build
    image: node:18.19
    commands:
      - cd packages/sdk
      - npm run build
    depends_on:
      - install

  - name: check-beta-version
    image: node:18.19
    commands:
      - cd packages/sdk
      - npm pkg get version | grep "-beta."
    when:
      branch:
        - main
      target:
        - sdk-publish-beta

  - name: npm-publish-beta
    image: plugins/npm
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token
      tag: beta
      access: public
      folder: packages/sdk
    depends_on:
      - build
      - check-beta-version
    when:
      branch:
        - main
      target:
        - sdk-publish-beta

  - name: npm-publish-latest
    image: plugins/npm
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token
      tag: latest
      access: public
      folder: packages/sdk
    depends_on:
      - build
    when:
      branch:
        - main
      target:
        - sdk-publish-latest

  - name: npm-authenticate
    image: robertstettner/drone-npm-auth
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token
    when:
      branch:
        - main
      target:
        - sdk-publish-beta
    depends_on:
      - npm-publish-beta

  - name: npm-retag-latest
    image: node:18.19
    commands:
      - npm dist-tag add @iexec/dataprotector@$(cd packages/sdk/ && npm pkg get version | sed 's/"//g') latest
    when:
      branch:
        - main
      target:
        - sdk-publish-beta
    depends_on:
      - npm-authenticate

---
kind: pipeline
type: docker
name: sdk deprecate npm version

trigger:
  event:
    - promote
  target:
    # deprecates a version of @iexec/dataprotector
    - sdk-deprecate-package

steps:
  - name: authenticate
    image: robertstettner/drone-npm-auth
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token

  - name: deprecate package
    image: node:18.19
    params:
      - PACKAGE_VERSION
    commands:
      - if [ -n "$PACKAGE_VERSION" ]; then npm deprecate @iexec/dataprotector@$PACKAGE_VERSION "deprecate $PACKAGE_VERSION"; else echo "PACKAGE_VERSION is not set"; fi

---
kind: pipeline
type: docker
name: sdk undeprecate npm version

trigger:
  event:
    - promote
  target:
    # remove the deprecation of a version of @iexec/dataprotector
    - sdk-undeprecate-package

steps:
  - name: authenticate
    image: robertstettner/drone-npm-auth
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token

  - name: undeprecate package
    image: node:18.19
    params:
      - PACKAGE_VERSION
    commands:
      - if [ -n "$PACKAGE_VERSION" ]; then npm deprecate @iexec/dataprotector@$PACKAGE_VERSION ""; else echo "PACKAGE_VERSION is not set"; fi

---
kind: pipeline
type: docker
name: dataprotector-deserializer publish npm

trigger:
  event:
    - promote
  target:
    # publish the package @iexec/dataprotector-deserializer on npm with the tag nightly
    - dataprotector-deserializer-publish-nightly
    # publish the package @iexec/dataprotector-deserializer on npm with the tag latest
    - dataprotector-deserializer-publish-latest
  branch:
    - develop
    - main

steps:
  - name: build test dependency dataprotector-sdk
    image: node:18
    pull: always
    commands:
      - cd packages/sdk
      - npm ci
      - npm run codegen
      - npm run build

  - name: install
    image: node:18
    pull: always
    commands:
      - cd packages/dataprotector-deserializer
      - node -v
      - npm -v
      - npm ci
      - npm run test:prepare

  - name: format
    image: node:18
    commands:
      - cd packages/dataprotector-deserializer
      - npm run check-format

  - name: lint
    image: node:18
    commands:
      - cd packages/dataprotector-deserializer
      - npm run lint

  - name: check-types
    image: node:18
    commands:
      - cd packages/dataprotector-deserializer
      - npm run check-types

  - name: test
    image: node:18
    commands:
      - cd packages/dataprotector-deserializer
      - npm run test

  - name: build
    image: node:18
    commands:
      - cd packages/dataprotector-deserializer
      - npm run build

  - name: set nightly version
    image: node:18.19
    commands:
      - cd packages/dataprotector-deserializer
      - eval npm pkg set version="$(npm pkg get version)-nightly-$DRONE_COMMIT"
    when:
      branch:
        - develop
      target:
        - dataprotector-deserializer-publish-nightly

  - name: npm publish nightly
    image: plugins/npm
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token_dataprotector_deserializer
      tag: nightly
      access: public
      folder: packages/dataprotector-deserializer
    when:
      branch:
        - develop
      target:
        - dataprotector-deserializer-publish-nightly

  - name: npm publish latest
    image: plugins/npm
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token_dataprotector_deserializer
      tag: latest
      access: public
      folder: packages/dataprotector-deserializer
    when:
      branch:
        - main
      target:
        - dataprotector-deserializer-publish-latest
