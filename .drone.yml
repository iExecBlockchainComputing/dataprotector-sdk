###################### SDK DRONE CI ######################
kind: pipeline
type: docker
name: sdk-default

trigger:
  event: push

steps:
  - name: only sdk package
    image: bash
    commands:
      - cp -r packages/sdk/. . && rm -rf packages

  - name: install
    image: node:18.19
    pull: always
    commands:
      - node -v
      - npm -v
      - npm ci

  - name: format
    image: node:18.19
    commands:
      - npm run check-format

  - name: lint
    image: node:18.19
    commands:
      - npm run lint

  - name: check-types
    image: node:18.19
    commands:
      - npm run check-types

  - name: test
    image: node:18.19
    commands:
      - npm run test

  - name: build
    image: node:18.19
    commands:
      - npm run build

  - name: npm publish dry-run
    image: node:18.19
    commands:
      - npm publish --dry-run

---
kind: pipeline
type: docker
name: publish npm nightly

trigger:
  event:
    - promote
  target:
    - nightly
  branch:
    - develop

steps:
  - name: only sdk package
    image: bash
    commands:
      - cp -r packages/sdk/. . && rm -rf packages

  - name: install
    image: node:18.19
    pull: always
    commands:
      - node -v
      - npm -v
      - npm ci

  - name: format
    image: node:18.19
    commands:
      - npm run check-format

  - name: lint
    image: node:18.19
    commands:
      - npm run lint

  - name: check-types
    image: node:18.19
    commands:
      - npm run check-types

  - name: test
    image: node:18.19
    commands:
      - npm run test

  - name: build
    image: node:18.19
    commands:
      - npm run build

  - name: set version nightly
    image: node:18.19
    commands:
      - eval npm pkg set version="$(npm pkg get version)-nightly-$DRONE_COMMIT"

  - name: npm publish
    image: plugins/npm
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token
      tag: nightly
      access: public

---
kind: pipeline
type: docker
name: publish npm latest

trigger:
  event:
    - promote
  target:
    - latest
  branch:
    - main

steps:
  - name: only sdk package
    image: bash
    commands:
      - cp -r packages/sdk/. . && rm -rf packages

  - name: install
    image: node:18.19
    pull: always
    commands:
      - node -v
      - npm -v
      - npm ci

  - name: check-format
    image: node:18.19
    commands:
      - npm run check-format

  - name: lint
    image: node:18.19
    commands:
      - npm run lint

  - name: check-types
    image: node:18.19
    commands:
      - npm run check-types

  - name: test
    image: node:18.19
    commands:
      - npm run test

  - name: build
    image: node:18.19
    commands:
      - npm run build

  - name: npm publish
    image: plugins/npm
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token
      tag: latest
      access: public

---
kind: pipeline
type: docker
name: deprecate-version

trigger:
  event:
    - promote
  target:
    - npm-deprecate-package

steps:
  - name: authenticate
    image: robertstettner/drone-npm-auth
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token

  - name: deprecate package
    image: node:18.19
    params:
      - PACKAGE_VERSION
    commands:
      - if [ -n "$PACKAGE_VERSION" ]; then npm deprecate @iexec/dataprotector@$PACKAGE_VERSION "deprecate $PACKAGE_VERSION"; else echo "PACKAGE_VERSION is not set"; fi
---
kind: pipeline
type: docker
name: undeprecate version

trigger:
  event:
    - promote
  target:
    - npm-undeprecate-package

steps:
  - name: authenticate
    image: robertstettner/drone-npm-auth
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token

  - name: undeprecate package
    image: node:18.19
    params:
      - PACKAGE_VERSION
    commands:
      - if [ -n "$PACKAGE_VERSION" ]; then npm deprecate @iexec/dataprotector@$PACKAGE_VERSION ""; else echo "PACKAGE_VERSION is not set"; fi

###################### SMART CONTRACT DRONE CI ######################
---
kind: pipeline
type: docker
name: smart-contract-default

trigger:
  event: push

steps:
  - name: only smart-contract package
    image: bash
    commands:
      - cp -r packages/smart-contract/. . && rm -rf packages

  - name: install deps
    image: node:18.19
    pull: always
    commands:
      - node -v
      - npm -v
      - npm ci

  - name: check format
    image: node:18.19
    commands:
      - npm run check-format

  - name: check lint
    image: node:18.19
    commands:
      - npm run lint

  - name: compile smart contracts
    image: node:18.19
    commands:
      - npm run compile

  - name: test smart contracts
    image: node:18.19
    commands:
      - npm run test

  - name: dry-deployment smart-contract
    image: node:18.19
    commands:
      - npm run deploy
      - cat .smart-contract-address

---
# deploy smart contract in prod or dev
kind: pipeline
type: docker
name: deploy smart contract

trigger:
  event:
    - promote
  target:
    - smart-contract-dev
    - smart-contract-production
  branch:
    - develop
    - main

steps:
  - name: only smart-contract package
    image: bash
    commands:
      - cp -r packages/smart-contract/. . && rm -rf packages

  - name: install deps
    image: node:18.19
    pull: always
    commands:
      - node -v
      - npm -v
      - npm ci

  - name: check format
    image: node:18.19
    commands:
      - npm run check-format

  - name: check lint
    image: node:18.19
    commands:
      - npm run lint

  - name: compile smart contracts
    image: node:18.19
    commands:
      - npm run compile

  - name: test smart contracts
    image: node:18.19
    commands:
      - npm run test

  - name: smart-contract dev deployment
    image: node:18.19
    environment:
      WALLET_PRIVATE_KEY:
        from_secret: deployer-dev-privatekey
    commands:
      - npm run deploy -- --network bellecour
      - cat .smart-contract-address
    when:
      target:
        - smart-contract-dev
      branch:
        - develop

  - name: smart-contract prod deployment
    image: node:18.19
    environment:
      WALLET_PRIVATE_KEY:
        from_secret: deployer-prod-privatekey
    commands:
      - npm run deploy -- --network bellecour
      - cat .smart-contract-address
    when:
      target:
        - smart-contract-production
      branch:
        - main

  # TODO: Adapt/delete this verification step according with the new dev environment
  - name: verify dev contract
    image: node:18.19
    commands:
      - npm run verify -- --network bellecour $(cat .smart-contract-address) $(cat .constructor-args-params)
    when:
      target:
        - smart-contract-dev
      branch:
        - develop

  - name: verify prod contract
    image: node:18.19
    commands:
      - npm run verify -- --network bellecour $(cat .smart-contract-address) $(cat .constructor-args-params)
    when:
      target:
        - smart-contract-production
      branch:
        - main

###################### SUBGRAPH DRONE CI ######################
---
kind: pipeline
type: docker
name: subgraph-default

trigger:
  event: push

steps:
  - name: only subgraph package
    image: bash
    commands:
      - cp -r packages/subgraph/. . && rm -rf packages

  - name: build-subgraph
    image: node:18.19
    commands:
      - npm ci
      - npm run codegen
      - npm run build

---
kind: pipeline
type: docker
name: deploy-subgraph-dev

trigger:
  event:
    - promote
  target:
    - subgraph-dev
  branch:
    - develop

steps:
  - name: only subgraph package
    image: bash
    commands:
      - cp -r packages/subgraph/. . && rm -rf packages

  - name: deploy
    image: node:18.19
    params:
      - START_BLOCK
    environment:
      GRAPHNODE_URL:
        from_secret: graphnode-url
      IPFS_URL:
        from_secret: ipfs-url
    commands:
      - export SUBGRAPH_NAME=bellecour/dev-dataprotector
      - echo "deploying commit $DRONE_COMMIT on subgraph $SUBGRAPH_NAME"
      - npm ci
      - npm run codegen
      - npm run build
      - npx graph create --node $GRAPHNODE_URL $SUBGRAPH_NAME
      - npx graph deploy --node $GRAPHNODE_URL $SUBGRAPH_NAME --ipfs $IPFS_URL --version-label $DRONE_COMMIT

---
kind: pipeline
type: docker
name: deploy-subgraph-production

trigger:
  event:
    - promote
  target:
    - subgraph-production
  branch:
    - main

steps:
  - name: only subgraph package
    image: bash
    commands:
      - cp -r packages/subgraph/. . && rm -rf packages

  - name: deploy
    image: node:18.19
    params:
      - START_BLOCK
    environment:
      GRAPHNODE_URL:
        from_secret: graphnode-url
      IPFS_URL:
        from_secret: ipfs-url
    commands:
      - export SUBGRAPH_NAME=bellecour/dataprotector
      - echo "deploying commit $DRONE_COMMIT on subgraph $SUBGRAPH_NAME"
      - npm ci
      - npm run codegen
      - npm run build
      - npx graph create --node $GRAPHNODE_URL $SUBGRAPH_NAME
      - npx graph deploy --node $GRAPHNODE_URL $SUBGRAPH_NAME --ipfs $IPFS_URL --version-label $(npm pkg get version)
---
# dapp content-creator-dapp default pipeline
kind: pipeline
type: docker
name: dapp-default

trigger:
  event:
    exclude:
      - promote

steps:
  - name: install-dependencies
    image: node:14-alpine3.11
    pull: always
    commands:
      - cd dapp
      - node -v
      - npm -v
      - npm ci

  - name: check-dapp-version-match-sconify-prod
    image: node:18.19
    commands:
      - cd dapp
      - cat ../.drone.yml | grep "iexechub/content-creator-dapp:$(npm pkg get version | sed 's/"//g')-sconify-"

  - name: check-code-format
    image: node:14-alpine3.11
    commands:
      - cd dapp
      - npm run check-format

  # - name: lint
  #   image: node:18.19
  #   commands:
  #     - cd dapp
  #     - npm run lint

  - name: run-tests
    image: node:14-alpine3.11
    commands:
      - cd dapp
      - npm run test:silent

  - name: docker-publish-dry-run
    # plugin doc https://plugins.drone.io/plugins/docker and repo https://github.com/drone-plugins/drone-docker
    image: plugins/docker
    pull: always
    settings:
      dry_run: true
      context: ./dapp
      dockerfile: ./dapp/Dockerfile
      registry: docker-regis.iex.ec
      repo: docker-regis.iex.ec/product/content-creator-dapp
      pull_image: true
      username:
        from_secret: nexus-user
      password:
        from_secret: nexus-password
---
# dapp content-creator: build non-scone (non-tee) docker image & publish on docker-regis (dev)
kind: pipeline
type: docker
name: publish-dev-non-tee-docker-image
trigger:
  event:
    - promote
  target:
    - dapp-dev-non-tee
  branch:
    - develop

steps:
  - name: install-dependencies
    image: node:14-alpine3.11
    pull: always
    commands:
      - cd dapp
      - node -v
      - npm -v
      - npm ci

  - name: check-code-format
    image: node:14-alpine3.11
    commands:
      - cd dapp
      - npm run check-format

  # - name: lint
  #   image: node:18.19
  #   commands:
  #     - cd dapp
  #     - npm run lint

  - name: run-tests
    image: node:14-alpine3.11
    commands:
      - cd dapp
      - npm run test:silent

  - name: publish-dev-non-tee-docker-image
    # plugin doc https://plugins.drone.io/plugins/docker and repo https://github.com/drone-plugins/drone-docker
    image: plugins/docker
    pull: always
    settings:
      context: ./dapp
      dockerfile: ./dapp/Dockerfile
      registry: docker-regis.iex.ec
      repo: docker-regis.iex.ec/product/content-creator-dapp
      pull_image: true
      username:
        from_secret: nexus-user
      password:
        from_secret: nexus-password
      tags:
        - dev
        - "dev-${DRONE_COMMIT}"

---
# dapp content-creator: build non-scone (non-tee) docker image & publish on docker-regis (prod)
# /!\ every step must run in dapp/
kind: pipeline
type: docker
name: publish-prod-non-tee-docker-image

trigger:
  event:
    - promote
  target:
    - dapp-prod-non-tee
  branch:
    - main

steps:
  - name: install
    image: node:14-alpine3.11
    pull: always
    commands:
      - cd dapp
      - node -v
      - npm -v
      - npm ci

  - name: format
    image: node:14-alpine3.11
    commands:
      - cd dapp
      - npm run check-format

  - name: run-lint
    image: node:18.19
    commands:
      - cd dapp
      - npm run lint

  - name: run-tests
    image: node:14-alpine3.11
    commands:
      - cd dapp
      - npm run test:silent

  - name: extract-version-from-package
    image: node:18.19
    # generates the .tags file for the docker plugin
    commands:
      - cd dapp
      - npm pkg get version | sed 's/"//g' > ../.tags

  - name: publish-prod-non-tee-docker-image
    # plugin doc https://plugins.drone.io/plugins/docker and repo https://github.com/drone-plugins/drone-docker
    image: plugins/docker
    pull: always
    settings:
      context: ./dapp
      dockerfile: ./dapp/Dockerfile
      # tag comes from .tags file
      registry: docker-regis.iex.ec
      repo: docker-regis.iex.ec/product/content-creator-dapp
      pull_image: true
      username:
        from_secret: nexus-user
      password:
        from_secret: nexus-password
# ---
# build sconified image (Jenkins)
# publish sconified image on dockerhub (Jenkins)
---
# pipeline to publish dapp on iexec
kind: pipeline
type: docker
name: deploy-dapp-contract

trigger:
  event:
    - promote
  target:
    - dapp-dev
    - dapp-prod
  branch:
    - develop
    - main

steps:
  - name: install-dapp-deps
    image: node:14-alpine3.11
    pull: always
    commands:
      - cd dapp
      - node -v
      - npm -v
      - npm ci

  - name: get-dev-app-tee-fingerprint
    image: iexechub/content-creator-dapp:dev-${DRONE_COMMIT}-sconify-5.7.5-v12-production
    commands:
      - SCONE_HASH=1 node > deployment-dapp/.scone-fingerprint
    when:
      target:
        - dapp-dev
      branch:
        - develop

  - name: get-prod-app-tee-fingerprint
    # /!\: maintain the version here
    image: iexechub/content-creator-dapp:0.0.1-sconify-5.7.5-v12-production
    commands:
      - SCONE_HASH=1 node > deployment-dapp/.scone-fingerprint
    when:
      target:
        - dapp-prod
      branch:
        - main

  # TODO : Add format script to the deploy-dapp monorepo

  # - name: lint
  #   image: node:18
  #   pull: always
  #   commands:
  #     - cd dapp
  #     - npm run lint

  - name: install-deployment-deps
    image: node:18
    commands:
      - cd deployment-dapp
      - npm ci

  - name: deploy-dapp-contract
    image: node:18
    params:
      - DOCKER_IMAGE_TAG
    environment:
      DRONE_DEPLOY_TO: $DRONE_DEPLOY_TO
      WALLET_PRIVATE_KEY_DEV:
        from_secret: protectedDataSharing-dapp-dev-privatekey
      WALLET_PRIVATE_KEY_PROD:
        from_secret: protectedDataSharing-dapp-prod-privatekey
    commands:
      - cd deployment-dapp
      - npm run deploy-dapp

  - name: publish-free-sell-order
    image: node:18
    environment:
      DRONE_DEPLOY_TO: $DRONE_DEPLOY_TO
      WALLET_PRIVATE_KEY_DEV:
        from_secret: protectedDataSharing-dapp-dev-privatekey
      WALLET_PRIVATE_KEY_PROD:
        from_secret: protectedDataSharing-dapp-prod-privatekey
      PRICE: "0"
      VOLUME: "1000000000"
    commands:
      - cd deployment-dapp
      - npm run publish-sell-order

  - name: configure-ens
    image: node:18
    pull: always
    environment:
      DRONE_DEPLOY_TO: $DRONE_DEPLOY_TO
      WALLET_PRIVATE_KEY_DEV:
        from_secret: protectedDataSharing-dapp-dev-privatekey
      WALLET_PRIVATE_KEY_PROD:
        from_secret: protectedDataSharing-dapp-prod-privatekey
    commands:
      - cd deployment-dapp
      - npm run configure-ens
---
# pipeline to publish sell order
kind: pipeline
type: docker
name: publish-app-order

trigger:
  event:
    - promote
  target:
    - dapp-publish-sell-order-dev
    - dapp-publish-sell-order-prod
  branch:
    - develop
    - main

steps:
  - name: install-dependencies
    image: node:18
    pull: always
    commands:
      - cd deployment-dapp
      - npm ci

  - name: publish-sell-order
    image: node:18
    pull: always
    params:
      - PRICE
      - VOLUME
    environment:
      DRONE_DEPLOY_TO: $DRONE_DEPLOY_TO
      WALLET_PRIVATE_KEY_DEV:
        from_secret: protectedDataSharing-dapp-dev-privatekey
      WALLET_PRIVATE_KEY_PROD:
        from_secret: protectedDataSharing-dapp-prod-privatekey
    commands:
      - cd deployment-dapp
      - npm run publish-sell-order
---
# pipeline to revoke sell order
kind: pipeline
type: docker
name: revoke-app-order

trigger:
  event:
    - promote
  target:
    - dapp-revoke-sell-order-dev
    - dapp-revoke-sell-order-prod
  branch:
    - develop
    - main

steps:
  - name: install-dependencies
    image: node:18
    pull: always
    commands:
      - cd deployment-dapp
      - npm ci

  - name: revoke-sell-order
    image: node:18
    pull: always
    params:
      - ORDER_HASH
    environment:
      DRONE_DEPLOY_TO: $DRONE_DEPLOY_TO
      WALLET_PRIVATE_KEY_DEV:
        from_secret: protectedDataSharing-dapp-dev-privatekey
      WALLET_PRIVATE_KEY_PROD:
        from_secret: protectedDataSharing-dapp-prod-privatekey
    commands:
      - cd deployment-dapp
      - npm run revoke-sell-order
---
# pipeline to transfer ownership of the dapp to the contract
kind: pipeline
type: docker
name: transfer-ownership

trigger:
  event:
    - promote
  target:
    - dapp-transfer-ownership-dev
    - dapp-transfer-ownership-prod
  branch:
    - develop
    - main

steps:
  - name: install-dependencies
    image: node:18
    pull: always
    commands:
      - cd deployment-dapp
      - npm ci

  - name: transfer-ownership
    image: node:18
    pull: always
    params:
      - DAPP_ADDRESS
      - NEW_OWNER
    environment:
      DRONE_DEPLOY_TO: $DRONE_DEPLOY_TO
      WALLET_PRIVATE_KEY_DEV:
        from_secret: protectedDataSharing-dapp-dev-privatekey
      WALLET_PRIVATE_KEY_PROD:
        from_secret: protectedDataSharing-dapp-prod-privatekey
    commands:
      - cd deployment-dapp
      - npm run transfer-ownership
