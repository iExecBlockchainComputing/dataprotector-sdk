kind: pipeline
type: docker
name: root

steps:
  - name: check-sdk-abi
    image: node:18.19
    commands:
      - cd packages/sdk
      - npm ci
      - npm run refresh-abis
      - |
        if [ -n "$(git diff --name-only)" ]; then
          echo "ABIs not up-to-date in packages/sdk, need to run 'npm run refresh-abis'"
          exit 1
        fi

  - name: check-subgraph-abi
    image: node:18.19
    commands:
      - cd packages/subgraph
      - npm ci
      - npm run refresh-abis
      - |
        if [ -n "$(git diff --name-only)" ]; then
          echo "ABIs not up-to-date in packages/subgraph, need to run 'npm run refresh-abis'"
          exit 1
        fi

  - name: check-dapp-abi
    image: node:18.19
    commands:
      - cd packages/protected-data-delivery-dapp/deployment
      - npm ci
      - npm run refresh-abis
      - |
        if [ -n "$(git diff --name-only)" ]; then
          echo "ABIs not up-to-date in protected-data-delivery-dapp/abis, need to run 'npm run refresh-abis'"
          exit 1
        fi

  - name: cat drone consider
    image: bash
    commands:
      - cat .drone-consider
    depends_on:
      - check-sdk-abi
      - check-subgraph-abi
      - check-dapp-abi

---
kind: pipeline
type: docker
name: deploy-subgraph-dev

trigger:
  event:
    - promote
  target:
    - subgraph-dev
    - subgraph-production
  branch:
    - develop
    - v2
    - main

steps:
  - name: only subgraph package
    image: bash
    commands:
      - cp -r packages/subgraph/. . && rm -rf packages

  - name: deploy-v2-dev
    image: node:18.19
    params:
      - START_BLOCK
    environment:
      GRAPHNODE_URL:
        from_secret: graphnode-url
      IPFS_URL:
        from_secret: ipfs-url
    commands:
      - export SUBGRAPH_NAME=bellecour/dev-dataprotector-v2
      - echo "deploying commit $DRONE_COMMIT on subgraph $SUBGRAPH_NAME"
      - npm ci
      - npm run codegen
      - npm run build
      - npx graph create --node $GRAPHNODE_URL $SUBGRAPH_NAME
      - npx graph deploy --node $GRAPHNODE_URL $SUBGRAPH_NAME --ipfs $IPFS_URL --version-label $DRONE_COMMIT
    when:
      target:
        - subgraph-dev
      branch:
        - v2

  - name: deploy-dev
    image: node:18.19
    params:
      - START_BLOCK
    environment:
      GRAPHNODE_URL:
        from_secret: graphnode-url
      IPFS_URL:
        from_secret: ipfs-url
    commands:
      - export SUBGRAPH_NAME=bellecour/dev-dataprotector
      - echo "deploying commit $DRONE_COMMIT on subgraph $SUBGRAPH_NAME"
      - npm ci
      - npm run codegen
      - npm run build
      - npx graph create --node $GRAPHNODE_URL $SUBGRAPH_NAME
      - npx graph deploy --node $GRAPHNODE_URL $SUBGRAPH_NAME --ipfs $IPFS_URL --version-label $DRONE_COMMIT
    when:
      target:
        - subgraph-dev
      branch:
        - develop

  - name: deploy-prod
    image: node:18.19
    params:
      - START_BLOCK
    environment:
      GRAPHNODE_URL:
        from_secret: graphnode-url
      IPFS_URL:
        from_secret: ipfs-url
    commands:
      - export SUBGRAPH_NAME=bellecour/dataprotector
      - echo "deploying commit $DRONE_COMMIT on subgraph $SUBGRAPH_NAME"
      - npm ci
      - npm run codegen
      - npm run build
      - npx graph create --node $GRAPHNODE_URL $SUBGRAPH_NAME
      - npx graph deploy --node $GRAPHNODE_URL $SUBGRAPH_NAME --ipfs $IPFS_URL --version-label $(npm pkg get version)
    when:
      target:
        - subgraph-production
      branch:
        - main

---
kind: pipeline
type: docker
name: dataprotector-deserializer publish npm

trigger:
  event:
    - promote
  target:
    - dataprotector-deserializer-nightly
    - dataprotector-deserializer-latest
  branch:
    - v2
    - develop
    - main

steps:
  - name: build test dependency dataprotector-sdk
    image: node:18
    pull: always
    commands:
      - cd packages/sdk
      - npm ci
      - npm run codegen
      - npm run build

  - name: install
    image: node:18
    pull: always
    commands:
      - cd packages/dataprotector-deserializer
      - node -v
      - npm -v
      - npm ci
      - npm run test:prepare

  - name: format
    image: node:18
    commands:
      - cd packages/dataprotector-deserializer
      - npm run check-format

  - name: lint
    image: node:18
    commands:
      - cd packages/dataprotector-deserializer
      - npm run lint

  - name: check-types
    image: node:18
    commands:
      - cd packages/dataprotector-deserializer
      - npm run check-types

  - name: test
    image: node:18
    commands:
      - cd packages/dataprotector-deserializer
      - npm run test

  - name: build
    image: node:18
    commands:
      - cd packages/dataprotector-deserializer
      - npm run build

  - name: set version
    image: node:18.19
    commands:
      - cd packages/dataprotector-deserializer
      - eval npm pkg set version="$(npm pkg get version)-nightly-$DRONE_COMMIT"
    when:
      branch:
        - develop
        - v2
      target:
        - dataprotector-deserializer-nightly

  - name: npm publish nightly
    image: plugins/npm
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token_dataprotector_deserializer
      tag: nightly
      access: public
      folder: packages/dataprotector-deserializer
    when:
      branch:
        - develop
        - v2
      target:
        - dataprotector-deserializer-nightly

  - name: npm publish latest
    image: plugins/npm
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token_dataprotector_deserializer
      tag: latest
      access: public
      folder: packages/dataprotector-deserializer
    when:
      branch:
        - main
        - v2
      target:
        - dataprotector-deserializer-latest

---
# dapp content-creator: build non-scone (non-tee) docker image & publish on docker-regis (dev)
kind: pipeline
type: docker
name: publish-dev-non-tee-docker-image

trigger:
  event:
    - promote
  target:
    - dapp-dev-non-tee
    - dapp-prod-non-tee
  branch:
    - develop
    - v2
    - main

steps:
  - name: only dapp package
    image: bash
    commands:
      - cp -r packages/protected-data-delivery-dapp/. . && rm -rf packages

  - name: install-dependencies
    image: node:14-alpine3.11
    pull: always
    commands:
      - node -v
      - npm -v
      - npm ci

  - name: format
    image: node:14-alpine3.11
    commands:
      - npm run check-format

  - name: lint
    image: node:18.19
    commands:
      - npm run lint

  - name: extract-version-from-package
    image: node:18.19
    # generates the .tags file for the docker plugin
    commands:
      - npm pkg get version | sed 's/"//g' > ../.tags
    when:
      branch:
        - main
      target:
        - dapp-prod-non-tee

  - name: publish-dev-non-tee-docker-image
    # plugin doc https://plugins.drone.io/plugins/docker and repo https://github.com/drone-plugins/drone-docker
    image: plugins/docker
    pull: always
    settings:
      dockerfile: ./Dockerfile
      registry: docker-regis.iex.ec
      repo: docker-regis.iex.ec/product/protected-data-delivery-dapp
      pull_image: true
      username:
        from_secret: nexus-user
      password:
        from_secret: nexus-password
      tags:
        - dev
        - "dev-${DRONE_COMMIT}"
    when:
      branch:
        - develop
        - v2
      target:
        - dapp-dev-non-tee

  - name: publish-prod-non-tee-docker-image
    # plugin doc https://plugins.drone.io/plugins/docker and repo https://github.com/drone-plugins/drone-docker
    image: plugins/docker
    pull: always
    settings:
      context: ./protected-data-delivery-dapp
      dockerfile: ./protected-data-delivery-dapp/Dockerfile
      # tag comes from .tags file
      registry: docker-regis.iex.ec
      repo: docker-regis.iex.ec/product/protected-data-delivery-dapp
      pull_image: true
      username:
        from_secret: nexus-user
      password:
        from_secret: nexus-password
    when:
      branch:
        - main
      target:
        - dapp-prod-non-tee

---
#pipeline to deploy dapp on iexec
kind: pipeline
type: docker
name: deploy-dapp-contract

trigger:
  event:
    - promote
  target:
    - deploy-dapp-dev
    - deploy-dapp-prod
  branch:
    - develop
    - v2
    - main

steps:
  - name: only dapp package
    image: bash
    commands:
      - cp -r packages/protected-data-delivery-dapp/. . && rm -rf packages

  - name: get scone fingerprint (dev)
    image: iexechub/protected-data-delivery-dapp:dev-${DOCKER_IMAGE_TAG:-${DRONE_COMMIT}}-sconify-5.7.5-v12-production
    commands:
      - SCONE_HASH=1 node > deployment/.scone-fingerprint
    params:
      - DOCKER_IMAGE_TAG
    when:
      target:
        - deploy-dapp-dev
      branch:
        - v2
        - develop

  - name: get scone fingerprint (prod)
    # /!\: maintain the version here
    image: iexechub/protected-data-delivery-dapp:0.1.0-sconify-5.7.5-v12-production
    commands:
      - SCONE_HASH=1 node > deployment/.scone-fingerprint
    when:
      target:
        - dapp-prod
      branch:
        - main

  - name: install deps
    image: node:18.19
    pull: always
    commands:
      - cd deployment
      - npm ci

  - name: format
    image: node:18.19
    commands:
      - cd deployment
      - npm run check-format

  - name: lint
    image: node:18.19
    commands:
      - cd deployment
      - npm run lint

  - name: deploy dapp
    image: node:18.19
    pull: always
    environment:
      DRONE_DEPLOY_TO: $DRONE_DEPLOY_TO
      WALLET_PRIVATE_KEY_DEV:
        from_secret: protectedDataSharing-dapp-dev-privatekey
      WALLET_PRIVATE_KEY_PROD:
        from_secret: protectedDataSharing-dapp-prod-privatekey
    commands:
      - cd deployment
      - npm run deploy-app

  - name: configure ENS
    image: node:18.19
    pull: always
    environment:
      DRONE_DEPLOY_TO: $DRONE_DEPLOY_TO
      WALLET_PRIVATE_KEY_DEV:
        from_secret: protectedDataSharing-dapp-dev-privatekey
      WALLET_PRIVATE_KEY_PROD:
        from_secret: protected-data-delivery-dapp-prod-privatekey
    commands:
      - cd deployment
      - npm run configure-app-ens

  - name: add app to whitelist
    image: node:18.19
    pull: always
    environment:
      DRONE_DEPLOY_TO: $DRONE_DEPLOY_TO
      WALLET_PRIVATE_KEY_DEV:
        from_secret: protectedDataSharing-dapp-dev-privatekey
      WALLET_PRIVATE_KEY_PROD:
        from_secret: protected-data-delivery-dapp-prod-privatekey
    params:
      - APP_WHITELIST
    commands:
      - cd deployment
      - npm run add-app-to-whitelist

  - name: transfer app ownership
    image: node:18.19
    pull: always
    environment:
      DRONE_DEPLOY_TO: $DRONE_DEPLOY_TO
      WALLET_PRIVATE_KEY_DEV:
        from_secret: protectedDataSharing-dapp-dev-privatekey
      WALLET_PRIVATE_KEY_PROD:
        from_secret: protected-data-delivery-dapp-prod-privatekey
    commands:
      - cd deployment
      - npm run transfer-app-ownership

---
#pipeline to deploy app whitelist on iexec
kind: pipeline
type: docker
name: deploy-app-whitelist

trigger:
  event:
    - promote
  target:
    - deploy-app-whitelist-dev
    - deploy-app-whitelist-prod
  branch:
    - develop
    - v2
    - main

steps:
  - name: only dapp package
    image: bash
    commands:
      - cp -r packages/protected-data-delivery-dapp/deployment/. . && rm -rf packages

  - name: install deps
    image: node:18.19
    pull: always
    commands:
      - npm ci

  - name: create app whitelist
    image: node:18.19
    pull: always
    environment:
      DRONE_DEPLOY_TO: $DRONE_DEPLOY_TO
      WALLET_PRIVATE_KEY_DEV:
        from_secret: protectedDataSharing-dapp-dev-privatekey
      WALLET_PRIVATE_KEY_PROD:
        from_secret: protected-data-delivery-dapp-prod-privatekey
    commands:
      - npm run create-app-whitelist

---
kind: pipeline
type: docker
name: publish npm

trigger:
  event:
    - promote
  target:
    - sdk-v2-nightly
    - sdk-latest
  branch:
    - v2
    - main

steps:
  ##### START LOCAL STACK #####
  - name: prepare-local-stack-env
    image: node
    commands:
      - node packages/sdk/tests/prepare-test-env.js

  - name: bellecour-fork
    detach: true
    image: ghcr.io/foundry-rs/foundry:latest
    pull: always
    expose:
      - 8545
    commands:
      - anvil --host 0.0.0.0 --port 8545 --block-time 1 --hardfork berlin --fork-url $(cat local-stack-env/BELLECOUR_FORK_URL) --fork-block-number $(cat local-stack-env/BELLECOUR_FORK_BLOCK) --chain-id 134 --gas-limit 6700000 --gas-price 0
    depends_on:
      - prepare-local-stack-env

  - name: bellecour-fork-healthy
    image: bash
    commands:
      - while ! nc -z bellecour-fork 8545 ; do sleep 1 ; done && echo "bellecour-fork ready"
    depends_on:
      - bellecour-fork

  - name: ipfs
    image: ipfs/go-ipfs:v0.9.1
    detach: true
    expose:
      - 8080
      - 5001

  - name: ipfs-healthy
    image: bash
    commands:
      - while ! nc -z ipfs 8080 ; do sleep 1 ; done && echo "ipfs gateway ready"
      - while ! nc -z ipfs 5001 ; do sleep 1 ; done && echo "ipfs upload ready"
    depends_on:
      - ipfs

  - name: market-mongo
    image: mongo:6.0.3
    detach: true
    expose:
      - 27017

  - name: market-mongo-healthy
    image: bash
    commands:
      - while ! nc -z market-mongo 27017 ; do sleep 1 ; done && echo "market-mongo ready"
    depends_on:
      - market-mongo

  - name: market-redis
    image: redis:7.0.7-alpine
    detach: true
    commands:
      - redis-server --appendonly yes
    expose:
      - 6379

  - name: market-redis-healthy
    image: bash
    commands:
      - while ! nc -z market-redis 6379 ; do sleep 1 ; done && echo "market-redis ready"
    depends_on:
      - market-redis

  - name: result-proxy-mongo
    image: library/mongo:4.2
    detach: true
    commands:
      - mongod --bind_ip_all --port 13202
    expose:
      - 13202

  - name: result-proxy-mongo-healthy
    image: bash
    commands:
      - while ! nc -z result-proxy-mongo 13202 ; do sleep 1 ; done && echo "result-proxy-mongo ready"
    depends_on:
      - result-proxy-mongo

  - name: graphnode-postgres
    image: postgres:12
    detach: true
    commands:
      - docker-entrypoint.sh postgres -cshared_preload_libraries=pg_stat_statements
    expose:
      - 5432
    environment:
      POSTGRES_USER: graphnode
      POSTGRES_PASSWORD: password
      POSTGRES_DB: graphnode-db

  - name: graphnode-postgres-healthy
    image: bash
    commands:
      - while ! nc -z graphnode-postgres 5432 ; do sleep 1 ; done && echo "graphnode-postgres ready"
    depends_on:
      - graphnode-postgres

  - name: graphnode
    image: graphprotocol/graph-node:v0.27.0
    detach: true
    expose:
      - 8000
      - 8020
    environment:
      postgres_host: graphnode-postgres
      postgres_port: 5432
      postgres_user: graphnode
      postgres_pass: password
      postgres_db: graphnode-db
      ipfs: ipfs:5001
      ethereum: bellecour:http://bellecour-fork:8545
    commands:
      - export GRAPH_ETHEREUM_GENESIS_BLOCK_NUMBER=$(cat local-stack-env/BELLECOUR_FORK_BLOCK)
      - cat local-stack-env/BELLECOUR_FORK_BLOCK
      - start
    depends_on:
      - prepare-local-stack-env
      - bellecour-fork-healthy
      - ipfs-healthy
      - graphnode-postgres-healthy

  - name: graphnode-healthy
    image: bash
    commands:
      - while ! nc -z graphnode 8020 ; do sleep 1 ; done && echo "graphnode admin ready"
      - while ! nc -z graphnode 8000 ; do sleep 1 ; done && echo "graphnode gql ready"
    depends_on:
      - graphnode

  - name: sms
    image: iexechub/iexec-sms:7.1.0
    detach: true
    environment:
      TZ: Europe/Paris
      IEXEC_SMS_BLOCKCHAIN_NODE_ADDRESS: http://bellecour-fork:8545
      IEXEC_HUB_ADDRESS: "0x3eca1B216A7DF1C7689aEb259fFB83ADFB894E7f"
      IEXEC_TEE_WORKER_PRE_COMPUTE_IMAGE: docker.io/iexechub/tee-worker-pre-compute:7.1.0-sconify-5.3.15-debug
      IEXEC_TEE_WORKER_PRE_COMPUTE_FINGERPRINT: 9f0f782d6edc611baa23ca0978f555ee58ea70e092640c961e75c25e9e4b0f22
      IEXEC_TEE_WORKER_PRE_COMPUTE_HEAP_SIZE_GB: 4
      IEXEC_TEE_WORKER_POST_COMPUTE_IMAGE: docker.io/iexechub/tee-worker-post-compute:7.1.1-sconify-5.3.15-debug
      IEXEC_TEE_WORKER_POST_COMPUTE_FINGERPRINT: face1376b97131e2dc75a556381d47a2e03bed9e1bc11e462471f99d1eefae50
      IEXEC_TEE_WORKER_POST_COMPUTE_HEAP_SIZE_GB: 4
      IEXEC_IGNORED_SGX_ADVISORIES: INTEL-SA-00161,INTEL-SA-00289,INTEL-SA-00334,INTEL-SA-00381,INTEL-SA-00389,INTEL-SA-00220,INTEL-SA-00270,INTEL-SA-00293,INTEL-SA-00320,INTEL-SA-00329,INTEL-SA-00477
      IEXEC_SCONE_TOLERATED_INSECURE_OPTIONS: debug-mode,hyperthreading,outdated-tcb
      IEXEC_SMS_DISPLAY_DEBUG_SESSION: "true"
      IEXEC_SCONE_CAS_HOST: foo
      IEXEC_SMS_IMAGE_LAS_IMAGE: foo
    expose:
      - 13300
    depends_on:
      - bellecour-fork-healthy

  - name: sms-healthy
    image: bash
    commands:
      - while ! nc -z sms 13300 ; do sleep 1 ; done && echo "sms ready"
    depends_on:
      - sms

  - name: result-proxy
    image: iexechub/iexec-result-proxy:7.1.0
    detach: true
    environment:
      IEXEC_PRIVATE_CHAIN_ADDRESS: http://bellecour-fork:8545
      IEXEC_PUBLIC_CHAIN_ADDRESS: http://bellecour-fork:8545
      IEXEC_HUB_ADDRESS: "0x3eca1B216A7DF1C7689aEb259fFB83ADFB894E7f"
      MONGO_HOST: result-proxy-mongo
      MONGO_PORT: 13202
      IEXEC_IPFS_HOST: ipfs
    expose:
      - 13200
    depends_on:
      - bellecour-fork-healthy
      - ipfs-healthy
      - result-proxy-mongo-healthy

  - name: result-proxy-healthy
    image: bash
    commands:
      - while ! nc -z result-proxy 13200 ; do sleep 1 ; done && echo "result-proxy ready"
    depends_on:
      - result-proxy

  - name: market-watcher
    image: iexechub/iexec-market-watcher:6.4
    detach: true
    environment:
      CHAIN: BELLECOUR
      ETH_WS_HOST: ws://bellecour-fork:8545
      ETH_RPC_HOST: http://bellecour-fork:8545
      MONGO_HOST: market-mongo
      REDIS_HOST: market-redis
    commands:
      - export START_BLOCK=$(cat local-stack-env/BELLECOUR_FORK_BLOCK)
      - cd /app
      - npm start
    depends_on:
      - prepare-local-stack-env
      - bellecour-fork-healthy
      - market-redis-healthy
      - market-mongo-healthy

  - name: market-api
    image: iexechub/iexec-market-api:6.4
    detach: true
    expose:
      - 3000
    environment:
      CHAINS: BELLECOUR_FORK
      BELLECOUR_FORK_ETH_RPC_HOST: http://bellecour-fork:8545
      BELLECOUR_FORK_CHAIN_ID: 134
      BELLECOUR_FORK_IS_NATIVE: "true"
      BELLECOUR_FORK_IEXEC_ADDRESS: "0x3eca1B216A7DF1C7689aEb259fFB83ADFB894E7f"
      MONGO_HOST: market-mongo
      REDIS_HOST: market-redis
      RATE_LIMIT_MAX: 10000
      RATE_LIMIT_PERIOD: 60000
      MAX_OPEN_ORDERS_PER_WALLET: 1000
    depends_on:
      - bellecour-fork-healthy
      - market-redis-healthy
      - market-mongo-healthy

  - name: market-api-healthy
    image: bash
    commands:
      - while ! nc -z market-api 3000 ; do sleep 1 ; done && echo "market-api ready"
    depends_on:
      - market-api
      - market-watcher

  - name: subgraph-install-deps
    image: node:18.19
    commands:
      - cd packages/subgraph
      - npm ci

  - name: subgraph-deploy
    image: node:18.19
    environment:
      GRAPHNODE_URL: http://graphnode:8020
      IPFS_URL: http://ipfs:5001
    commands:
      - export START_BLOCK=$(cat local-stack-env/BELLECOUR_FORK_BLOCK)
      - cd packages/subgraph
      - npm run all
    depends_on:
      - prepare-local-stack-env
      - subgraph-install-deps
      - ipfs-healthy
      - graphnode-healthy

  - name: stack-ready
    image: bash
    commands:
      - echo "all services ready"
    depends_on:
      - bellecour-fork-healthy
      - sms-healthy
      - result-proxy-healthy
      - market-api-healthy
      - ipfs-healthy
      - graphnode-healthy
      - subgraph-deploy

  ### START LOCAL STACK END ###

  - name: install
    image: node:18.19
    pull: always
    commands:
      - node -v
      - npm -v
      - cd packages/sdk
      - npm ci
      - npm run codegen

  - name: format
    image: node:18.19
    commands:
      - cd packages/sdk
      - npm run check-format
    depends_on:
      - install

  - name: lint
    image: node:18.19
    commands:
      - cd packages/sdk
      - npm run lint
    depends_on:
      - install

  - name: check-types
    image: node:18.19
    commands:
      - cd packages/sdk
      - npm run check-types
    depends_on:
      - install

  - name: test
    image: node:18.19
    commands:
      - cd packages/sdk
      - npm run test:coverage
    depends_on:
      - install
      - stack-ready

  - name: build
    image: node:18.19
    commands:
      - cd packages/sdk
      - npm run build
    depends_on:
      - install

  - name: set version
    image: node:18.19
    commands:
      - cd packages/sdk
      - eval npm pkg set version="$(npm pkg get version)-nightly-$DRONE_COMMIT"
    when:
      branch:
        - v2

  - name: npm publish v2-nightly
    image: plugins/npm
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token
      tag: v2-nightly
      access: public
      folder: packages/sdk
    depends_on:
      - format
      - lint
      - check-types
      - test
      - build
    when:
      branch:
        - v2

  - name: npm publish latest
    image: plugins/npm
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token
      tag: latest
      access: public
      folder: packages/sdk
    depends_on:
      - format
      - lint
      - check-types
      - test
      - build
    when:
      branch:
        - main

---
kind: pipeline
type: docker
name: deprecate-version

trigger:
  event:
    - promote
  target:
    - sdk-deprecate-package

steps:
  - name: authenticate
    image: robertstettner/drone-npm-auth
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token

  - name: deprecate package
    image: node:18.19
    params:
      - PACKAGE_VERSION
    commands:
      - if [ -n "$PACKAGE_VERSION" ]; then npm deprecate @iexec/dataprotector@$PACKAGE_VERSION "deprecate $PACKAGE_VERSION"; else echo "PACKAGE_VERSION is not set"; fi
---
kind: pipeline
type: docker
name: undeprecate version

trigger:
  event:
    - promote
  target:
    - sdk-undeprecate-package

steps:
  - name: authenticate
    image: robertstettner/drone-npm-auth
    settings:
      username:
        from_secret: npm_username
      token:
        from_secret: npm_token

  - name: undeprecate package
    image: node:18.19
    params:
      - PACKAGE_VERSION
    commands:
      - if [ -n "$PACKAGE_VERSION" ]; then npm deprecate @iexec/dataprotector@$PACKAGE_VERSION ""; else echo "PACKAGE_VERSION is not set"; fi

---
# deploy smart contract in prod or dev
kind: pipeline
type: docker
name: deploy-sharing-smart-contract

trigger:
  event:
    - promote
  target:
    - smart-contract-dev
    - smart-contract-production
  branch:
    - v2
    - main

steps:
  - name: only-sharing-smart-contract-package
    image: bash
    commands:
      - cp -r packages/sharing-smart-contract/. . && rm -rf packages

  - name: install-deps
    image: node:18.19
    pull: always
    commands:
      - node -v
      - npm -v
      - npm ci
    depends_on:
      - only-sharing-smart-contract-package

  - name: install-forge
    image: node:18.19
    pull: always
    commands:
      - export XDG_CONFIG_HOME=/drone/src
      - curl -L https://foundry.paradigm.xyz | bash
      - export PATH="$PATH:/drone/src/.foundry/bin"
      - foundryup
      - forge install foundry-rs/forge-std --no-git
    depends_on:
      - only-sharing-smart-contract-package

  - name: bellecour-fork
    detach: true
    image: ghcr.io/foundry-rs/foundry:latest
    pull: always
    expose:
      - 8545
    commands:
      - anvil --host 0.0.0.0 --port 8545 --hardfork berlin --fork-url https://bellecour.iex.ec --chain-id 134 --gas-limit 6700000 --gas-price 0

  - name: bellecour-fork-healthy
    image: bash
    commands:
      - while ! nc -z bellecour-fork 8545 ; do sleep 1 ; done && echo "bellecour-fork ready"
    depends_on:
      - bellecour-fork

  - name: compile
    image: node:18.19
    commands:
      - export PATH="$PATH:/drone/src/.foundry/bin"
      - npm run compile
    depends_on:
      - install-forge
      - install-deps

  - name: check format
    image: node:18.19
    commands:
      - npm run check-format
    depends_on:
      - install-deps

  - name: lint
    image: node:18.19
    commands:
      - npm run lint
    depends_on:
      - install-deps

  - name: uml-diagrams
    image: node:18.19
    commands:
      - npm run uml
    depends_on:
      - install-deps

  - name: static-analyzer
    image: node:18.19
    commands:
      - git clone https://github.com/Picodes/4naly3er.git
      - cd 4naly3er
      - git reset --hard HEAD~1 # FIX issue https://github.com/Picodes/4naly3er/issues/48
      - yarn install
      - yarn analyze ../contracts
    depends_on:
      - lint

  - name: hardhat-tests
    image: node:18.19
    commands:
      - export PATH="$PATH:/drone/src/.foundry/bin"
      - npm run test -- --network ci-bellecour-fork
    depends_on:
      - install-deps
      - install-forge
      - bellecour-fork-healthy

  - name: forge-tests
    image: node:18.19
    commands:
      - export PATH="$PATH:/drone/src/.foundry/bin"
      - forge test --no-match-test "invariant" -vvvvv
    depends_on:
      - install-deps
      - install-forge
      - bellecour-fork-healthy

  - name: smart-contract dev deployment
    image: node:18.19
    environment:
      WALLET_PRIVATE_KEY:
        from_secret: deployer-dev-privatekey
    commands:
      - export PATH="$PATH:/drone/src/.foundry/bin"
      - npm run deploy -- --network bellecour
    depends_on:
      - compile
      - forge-tests
      - hardhat-tests
      - static-analyzer
    when:
      target:
        - smart-contract-dev
      branch:
        - v2

  - name: smart-contract prod deployment
    image: node:18.19
    environment:
      WALLET_PRIVATE_KEY:
        from_secret: deployer-prod-privatekey
    commands:
      - export PATH="$PATH:/drone/src/.foundry/bin"
      - npm run deploy -- --network bellecour
    depends_on:
      - compile
      - forge-tests
      - hardhat-tests
      - static-analyzer
    when:
      target:
        - smart-contract-production
      branch:
        - main

  # TODO : Fix
  # - name: verify dev contract
  #   image: node:18.19
  #   commands:
  #     - timeout 30 npm run verify -- --network bellecour $(cat .smart-contract-address) || echo "verification may have failed, check at https://blockscout-bellecour.iex.ec/address/$(cat .smart-contract-address)/contracts#address-tabs"
  #   when:
  #     target:
  #       - smart-contract-dev
  #     branch:
  #       - develop

  # - name: verify prod contract
  #   image: node:18.19
  #   commands:
  #     - timeout 30 npm run verify -- --network bellecour $(cat .smart-contract-address) || echo "verification may have failed, check at https://blockscout-bellecour.iex.ec/address/$(cat .smart-contract-address)/contracts#address-tabs"
  #   when:
  #     target:
  #       - smart-contract-production
  #     branch:
  #       - main

---
#pipeline to updateEnv in DataProtectorSharing SC
kind: pipeline
type: docker
name: update-env-smart-contract

trigger:
  event:
    - promote
  target:
    - update-env-dev
    - update-env-prod
  branch:
    - develop
    - v2
    - main

steps:
  - name: only-sharing-smart-contract-package
    image: bash
    commands:
      - cp -r packages/sharing-smart-contract/. . && rm -rf packages

  - name: install deps
    image: node:18.19
    pull: always
    commands:
      - npm ci
    depends_on:
      - only-sharing-smart-contract-package

  - name: install-forge
    image: node:18.19
    pull: always
    commands:
      - export XDG_CONFIG_HOME=/drone/src
      - curl -L https://foundry.paradigm.xyz | bash
      - export PATH="$PATH:/drone/src/.foundry/bin"
      - foundryup
      - forge install foundry-rs/forge-std --no-git
    depends_on:
      - only-sharing-smart-contract-package

  - name: updateEnv dev in SC
    image: node:18.19
    pull: always
    Params:
      - PROTECTED_DATA_SHARING_CONTRACT
      - RESULT_STORAGE_PROXY
    environment:
      WALLET_PRIVATE_KEY:
        from_secret: deployer-dev-privatekey
    commands:
      - export PATH="$PATH:/drone/src/.foundry/bin"
      - npm run updateEnv -- --network bellecour
    depends_on:
      - install-forge
      - install deps
    when:
      target:
        - update-env-dev
      branch:
        - v2

  - name: updateEnv prod in SC
    image: node:18.19
    pull: always
    Params:
      - PROTECTED_DATA_SHARING_CONTRACT
      - RESULT_STORAGE_PROXY
    environment:
      WALLET_PRIVATE_KEY:
        from_secret: deployer-prod-privatekey
    commands:
      - export PATH="$PATH:/drone/src/.foundry/bin"
      - npm run updateEnv -- --network bellecour
    depends_on:
      - install-forge
      - install deps
    when:
      target:
        - update-env-prod
      branch:
        - main
