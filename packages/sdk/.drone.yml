###################### SDK DRONE CI ######################
kind: pipeline
type: docker
name: sdk-default

trigger:
  event: push

steps:
  ##### START LOCAL STACK #####
  - name: prepare-local-stack-env
    image: node
    commands:
      - node packages/sdk/tests/prepare-test-env.js

  - name: bellecour-fork
    detach: true
    image: ghcr.io/foundry-rs/foundry:latest
    pull: always
    expose:
      - 8545
    commands:
      - anvil --host 0.0.0.0 --port 8545 --block-time 1 --hardfork berlin --fork-url $(cat local-stack-env/BELLECOUR_FORK_URL) --fork-block-number $(cat local-stack-env/BELLECOUR_FORK_BLOCK) --chain-id 134 --gas-limit 6700000 --gas-price 0
    depends_on:
      - prepare-local-stack-env

  - name: bellecour-fork-healthy
    image: bash
    commands:
      - while ! nc -z bellecour-fork 8545 ; do sleep 1 ; done && echo "bellecour-fork ready"
    depends_on:
      - bellecour-fork

  - name: ipfs
    image: ipfs/go-ipfs:v0.9.1
    detach: true
    expose:
      - 8080
      - 5001

  - name: ipfs-healthy
    image: bash
    commands:
      - while ! nc -z ipfs 8080 ; do sleep 1 ; done && echo "ipfs gateway ready"
      - while ! nc -z ipfs 5001 ; do sleep 1 ; done && echo "ipfs upload ready"
    depends_on:
      - ipfs

  - name: market-mongo
    image: mongo:6.0.3
    detach: true
    expose:
      - 27017

  - name: market-mongo-healthy
    image: bash
    commands:
      - while ! nc -z market-mongo 27017 ; do sleep 1 ; done && echo "market-mongo ready"
    depends_on:
      - market-mongo

  - name: market-redis
    image: redis:7.0.7-alpine
    detach: true
    commands:
      - redis-server --appendonly yes
    expose:
      - 6379

  - name: market-redis-healthy
    image: bash
    commands:
      - while ! nc -z market-redis 6379 ; do sleep 1 ; done && echo "market-redis ready"
    depends_on:
      - market-redis

  - name: result-proxy-mongo
    image: library/mongo:4.2
    detach: true
    commands:
      - mongod --bind_ip_all --port 13202
    expose:
      - 13202

  - name: result-proxy-mongo-healthy
    image: bash
    commands:
      - while ! nc -z result-proxy-mongo 13202 ; do sleep 1 ; done && echo "result-proxy-mongo ready"
    depends_on:
      - result-proxy-mongo

  - name: graphnode-postgres
    image: postgres:12
    detach: true
    commands:
      - docker-entrypoint.sh postgres -cshared_preload_libraries=pg_stat_statements
    expose:
      - 5432
    environment:
      POSTGRES_USER: graphnode
      POSTGRES_PASSWORD: password
      POSTGRES_DB: graphnode-db
      PGDATA: '/var/lib/postgresql/data'
      POSTGRES_INITDB_ARGS: '-E UTF8 --locale=C'

  - name: graphnode-postgres-healthy
    image: bash
    commands:
      - while ! nc -z graphnode-postgres 5432 ; do sleep 1 ; done && echo "graphnode-postgres ready"
    depends_on:
      - graphnode-postgres

  - name: graphnode
    image: graphprotocol/graph-node:v0.34.1
    detach: true
    expose:
      - 8000
      - 8020
    environment:
      postgres_host: graphnode-postgres
      postgres_port: 5432
      postgres_user: graphnode
      postgres_pass: password
      postgres_db: graphnode-db
      ipfs: ipfs:5001
      ethereum: bellecour:http://bellecour-fork:8545
    commands:
      - export GRAPH_ETHEREUM_GENESIS_BLOCK_NUMBER=$(cat local-stack-env/BELLECOUR_FORK_BLOCK)
      - cat local-stack-env/BELLECOUR_FORK_BLOCK
      - start
    depends_on:
      - prepare-local-stack-env
      - bellecour-fork-healthy
      - ipfs-healthy
      - graphnode-postgres-healthy

  - name: graphnode-healthy
    image: bash
    commands:
      - while ! nc -z graphnode 8020 ; do sleep 1 ; done && echo "graphnode admin ready"
      - while ! nc -z graphnode 8000 ; do sleep 1 ; done && echo "graphnode gql ready"
    depends_on:
      - graphnode

  - name: sms
    image: iexechub/iexec-sms:7.1.0
    detach: true
    environment:
      TZ: Europe/Paris
      IEXEC_SMS_BLOCKCHAIN_NODE_ADDRESS: http://bellecour-fork:8545
      IEXEC_HUB_ADDRESS: '0x3eca1B216A7DF1C7689aEb259fFB83ADFB894E7f'
      IEXEC_TEE_WORKER_PRE_COMPUTE_IMAGE: docker.io/iexechub/tee-worker-pre-compute:7.1.0-sconify-5.3.15-debug
      IEXEC_TEE_WORKER_PRE_COMPUTE_FINGERPRINT: 9f0f782d6edc611baa23ca0978f555ee58ea70e092640c961e75c25e9e4b0f22
      IEXEC_TEE_WORKER_PRE_COMPUTE_HEAP_SIZE_GB: 4
      IEXEC_TEE_WORKER_POST_COMPUTE_IMAGE: docker.io/iexechub/tee-worker-post-compute:7.1.1-sconify-5.3.15-debug
      IEXEC_TEE_WORKER_POST_COMPUTE_FINGERPRINT: face1376b97131e2dc75a556381d47a2e03bed9e1bc11e462471f99d1eefae50
      IEXEC_TEE_WORKER_POST_COMPUTE_HEAP_SIZE_GB: 4
      IEXEC_IGNORED_SGX_ADVISORIES: INTEL-SA-00161,INTEL-SA-00289,INTEL-SA-00334,INTEL-SA-00381,INTEL-SA-00389,INTEL-SA-00220,INTEL-SA-00270,INTEL-SA-00293,INTEL-SA-00320,INTEL-SA-00329,INTEL-SA-00477
      IEXEC_SCONE_TOLERATED_INSECURE_OPTIONS: debug-mode,hyperthreading,outdated-tcb
      IEXEC_SMS_DISPLAY_DEBUG_SESSION: 'true'
      IEXEC_SCONE_CAS_HOST: foo
      IEXEC_SMS_IMAGE_LAS_IMAGE: foo
    expose:
      - 13300
    depends_on:
      - bellecour-fork-healthy

  - name: sms-healthy
    image: bash
    commands:
      - while ! nc -z sms 13300 ; do sleep 1 ; done && echo "sms ready"
    depends_on:
      - sms

  - name: result-proxy
    image: iexechub/iexec-result-proxy:7.1.0
    detach: true
    environment:
      IEXEC_PRIVATE_CHAIN_ADDRESS: http://bellecour-fork:8545
      IEXEC_PUBLIC_CHAIN_ADDRESS: http://bellecour-fork:8545
      IEXEC_HUB_ADDRESS: '0x3eca1B216A7DF1C7689aEb259fFB83ADFB894E7f'
      MONGO_HOST: result-proxy-mongo
      MONGO_PORT: 13202
      IEXEC_IPFS_HOST: ipfs
    expose:
      - 13200
    depends_on:
      - bellecour-fork-healthy
      - ipfs-healthy
      - result-proxy-mongo-healthy

  - name: result-proxy-healthy
    image: bash
    commands:
      - while ! nc -z result-proxy 13200 ; do sleep 1 ; done && echo "result-proxy ready"
    depends_on:
      - result-proxy

  - name: market-watcher
    image: iexechub/iexec-market-watcher:6.4
    detach: true
    environment:
      CHAIN: BELLECOUR
      ETH_WS_HOST: ws://bellecour-fork:8545
      ETH_RPC_HOST: http://bellecour-fork:8545
      MONGO_HOST: market-mongo
      REDIS_HOST: market-redis
    commands:
      - export START_BLOCK=$(cat local-stack-env/BELLECOUR_FORK_BLOCK)
      - cd /app
      - npm start
    depends_on:
      - prepare-local-stack-env
      - bellecour-fork-healthy
      - market-redis-healthy
      - market-mongo-healthy

  - name: market-api
    image: iexechub/iexec-market-api:6.4
    detach: true
    expose:
      - 3000
    environment:
      CHAINS: BELLECOUR_FORK
      BELLECOUR_FORK_ETH_RPC_HOST: http://bellecour-fork:8545
      BELLECOUR_FORK_CHAIN_ID: 134
      BELLECOUR_FORK_IS_NATIVE: 'true'
      BELLECOUR_FORK_IEXEC_ADDRESS: '0x3eca1B216A7DF1C7689aEb259fFB83ADFB894E7f'
      MONGO_HOST: market-mongo
      REDIS_HOST: market-redis
      RATE_LIMIT_MAX: 10000
      RATE_LIMIT_PERIOD: 60000
      MAX_OPEN_ORDERS_PER_WALLET: 1000
    depends_on:
      - bellecour-fork-healthy
      - market-redis-healthy
      - market-mongo-healthy

  - name: market-api-healthy
    image: bash
    commands:
      - while ! nc -z market-api 3000 ; do sleep 1 ; done && echo "market-api ready"
    depends_on:
      - market-api
      - market-watcher

  - name: subgraph-install-deps
    image: node:18.19
    commands:
      - cd packages/subgraph
      - npm ci

  - name: subgraph-deploy
    image: node:18.19
    environment:
      GRAPHNODE_URL: http://graphnode:8020
      IPFS_URL: http://ipfs:5001
      ENV: prod
    commands:
      - export START_BLOCK=$(cat local-stack-env/BELLECOUR_FORK_BLOCK)
      - cd packages/subgraph
      - npm run all
    depends_on:
      - prepare-local-stack-env
      - subgraph-install-deps
      - ipfs-healthy
      - graphnode-healthy

  - name: bellecour-fork-voucher-deployment
    #  https://github.com/iExecBlockchainComputing/voucher-deployer
    image: pierreiexec/voucher-deployer
    pull: always
    environment:
      RPC_URL: http://bellecour-fork:8545
      GRAPHNODE_URL: http://graphnode:8020
      IPFS_URL: http://ipfs:5001
    commands:
      - sh /app/entrypoint.sh
      # update the voucher-config for test scripts (js & ts)
      - echo "export const VOUCHER_HUB_ADDRESS = '$(cat /app/out/VoucherHub.address)';" > ./packages/sdk/tests/bellecour-fork/voucher-config.js
      - cp ./packages/sdk/tests/bellecour-fork/voucher-config.js ./packages/sdk/tests/bellecour-fork/voucher-config.ts
      - echo "export const VOUCHER_HUB_ADDRESS = '$(cat /app/out/VoucherHub.address)';" > ./packages/sharing-smart-contract/test/bellecour-fork/voucher-config.js
    depends_on:
      - bellecour-fork-healthy
      - ipfs-healthy
      - graphnode-healthy

  - name: sharing-contract-install-deps
    image: node:18.19
    commands:
      - cd packages/sharing-smart-contract
      - npm ci

  - name: sharing-contract-install-forge
    image: node:18.19
    pull: always
    commands:
      - export XDG_CONFIG_HOME=/drone/src
      - curl -L https://foundry.paradigm.xyz | bash
      - export PATH="$PATH:/drone/src/.foundry/bin"
      - foundryup
      - cd packages/sharing-smart-contract
      - forge install foundry-rs/forge-std --no-git

  - name: sharing-contract-upgrade
    image: node:18
    pull: always
    commands:
      - cd packages/sharing-smart-contract
      - export PATH="$PATH:/drone/src/.foundry/bin"
      - npm run upgrade-local-fork -- --network ci-bellecour-fork
    depends_on:
      - sharing-contract-install-forge
      - sharing-contract-install-deps
      - bellecour-fork-voucher-deployment

  - name: stack-ready
    image: bash
    commands:
      - echo "all services ready"
    depends_on:
      - bellecour-fork-healthy
      - sms-healthy
      - result-proxy-healthy
      - market-api-healthy
      - ipfs-healthy
      - graphnode-healthy
      - subgraph-deploy
      - bellecour-fork-voucher-deployment

  ### START LOCAL STACK END ###

  - name: install
    image: node:18.19
    pull: always
    commands:
      - node -v
      - npm -v
      - cd packages/sdk
      - npm ci
      - npm run codegen

  - name: format
    image: node:18.19
    commands:
      - cd packages/sdk
      - npm run check-format
    depends_on:
      - install

  - name: lint
    image: node:18.19
    commands:
      - cd packages/sdk
      - npm run lint
    depends_on:
      - install

  - name: check-types
    image: node:18.19
    commands:
      - cd packages/sdk
      - npm run check-types
    depends_on:
      - install

  - name: test
    image: node:18.19
    commands:
      - cd packages/sdk
      - npm run test:coverage
    depends_on:
      - install
      - stack-ready

  - name: build
    image: node:18.19
    commands:
      - cd packages/sdk
      - npm run build
    depends_on:
      - install

  - name: npm publish dry-run
    image: node:18.19
    commands:
      - cd packages/sdk
      - npm publish --dry-run
    depends_on:
      - format
      - lint
      - check-types
      - test
      - build
