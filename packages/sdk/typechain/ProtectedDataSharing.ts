/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common.js";

export declare namespace ISubscription {
  export type SubscriptionParamsStruct = {
    price: BigNumberish;
    duration: BigNumberish;
  };

  export type SubscriptionParamsStructOutput = [
    price: bigint,
    duration: bigint
  ] & { price: bigint; duration: bigint };
}

export declare namespace IexecLibOrders_v5 {
  export type WorkerpoolOrderStruct = {
    workerpool: AddressLike;
    workerpoolprice: BigNumberish;
    volume: BigNumberish;
    tag: BytesLike;
    category: BigNumberish;
    trust: BigNumberish;
    apprestrict: AddressLike;
    datasetrestrict: AddressLike;
    requesterrestrict: AddressLike;
    salt: BytesLike;
    sign: BytesLike;
  };

  export type WorkerpoolOrderStructOutput = [
    workerpool: string,
    workerpoolprice: bigint,
    volume: bigint,
    tag: string,
    category: bigint,
    trust: bigint,
    apprestrict: string,
    datasetrestrict: string,
    requesterrestrict: string,
    salt: string,
    sign: string
  ] & {
    workerpool: string;
    workerpoolprice: bigint;
    volume: bigint;
    tag: string;
    category: bigint;
    trust: bigint;
    apprestrict: string;
    datasetrestrict: string;
    requesterrestrict: string;
    salt: string;
    sign: string;
  };
}

export declare namespace IRental {
  export type RentingParamsStruct = {
    price: BigNumberish;
    duration: BigNumberish;
  };

  export type RentingParamsStructOutput = [price: bigint, duration: bigint] & {
    price: bigint;
    duration: bigint;
  };
}

export declare namespace ISale {
  export type SellingParamsStruct = { isForSale: boolean; price: BigNumberish };

  export type SellingParamsStructOutput = [
    isForSale: boolean,
    price: bigint
  ] & { isForSale: boolean; price: bigint };
}

export interface ProtectedDataSharingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "addProtectedDataToCollection"
      | "approve"
      | "balanceOf"
      | "buyProtectedData"
      | "buyProtectedDataForCollection"
      | "collectionDetails"
      | "consumeProtectedData"
      | "createCollection"
      | "earning"
      | "getApproved"
      | "getCollectionSubscriber"
      | "getProtectedDataRenter"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isApprovedForAll"
      | "name"
      | "onERC721Received"
      | "ownerOf"
      | "protectedDataDetails"
      | "removeCollection"
      | "removeProtectedDataForSale"
      | "removeProtectedDataFromCollection"
      | "removeProtectedDataFromRenting"
      | "removeProtectedDataFromSubscription"
      | "renounceRole"
      | "rentProtectedData"
      | "revokeRole"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setProtectedDataForSale"
      | "setProtectedDataToRenting"
      | "setProtectedDataToSubscription"
      | "setSubscriptionParams"
      | "subscribeTo"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
      | "updateEnv"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "Initialized"
      | "NewRental"
      | "NewSubscription"
      | "NewSubscriptionParams"
      | "ProtectedDataAddedForRenting"
      | "ProtectedDataAddedForSale"
      | "ProtectedDataAddedForSubscription"
      | "ProtectedDataConsumed"
      | "ProtectedDataRemovedFromRenting"
      | "ProtectedDataRemovedFromSale"
      | "ProtectedDataRemovedFromSubscription"
      | "ProtectedDataSold"
      | "ProtectedDataTransfer"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Transfer"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addProtectedDataToCollection",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyProtectedData",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyProtectedDataForCollection",
    values: [BigNumberish, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "consumeProtectedData",
    values: [
      BigNumberish,
      AddressLike,
      IexecLibOrders_v5.WorkerpoolOrderStruct,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createCollection",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "earning",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionSubscriber",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtectedDataRenter",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protectedDataDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeProtectedDataForSale",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeProtectedDataFromCollection",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeProtectedDataFromRenting",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeProtectedDataFromSubscription",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rentProtectedData",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtectedDataForSale",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtectedDataToRenting",
    values: [BigNumberish, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtectedDataToSubscription",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubscriptionParams",
    values: [BigNumberish, ISubscription.SubscriptionParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeTo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEnv",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addProtectedDataToCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyProtectedData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyProtectedDataForCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consumeProtectedData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earning", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionSubscriber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtectedDataRenter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protectedDataDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeProtectedDataForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeProtectedDataFromCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeProtectedDataFromRenting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeProtectedDataFromSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rentProtectedData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtectedDataForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtectedDataToRenting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtectedDataToSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubscriptionParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscribeTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateEnv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewRentalEvent {
  export type InputTuple = [
    collectionTokenId: BigNumberish,
    protectedData: AddressLike,
    renter: AddressLike,
    endDate: BigNumberish
  ];
  export type OutputTuple = [
    collectionTokenId: bigint,
    protectedData: string,
    renter: string,
    endDate: bigint
  ];
  export interface OutputObject {
    collectionTokenId: bigint;
    protectedData: string;
    renter: string;
    endDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewSubscriptionEvent {
  export type InputTuple = [
    collectionTokenId: BigNumberish,
    subscriber: AddressLike,
    endDate: BigNumberish
  ];
  export type OutputTuple = [
    collectionTokenId: bigint,
    subscriber: string,
    endDate: bigint
  ];
  export interface OutputObject {
    collectionTokenId: bigint;
    subscriber: string;
    endDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewSubscriptionParamsEvent {
  export type InputTuple = [
    collectionTokenId: BigNumberish,
    subscriptionParams: ISubscription.SubscriptionParamsStruct
  ];
  export type OutputTuple = [
    collectionTokenId: bigint,
    subscriptionParams: ISubscription.SubscriptionParamsStructOutput
  ];
  export interface OutputObject {
    collectionTokenId: bigint;
    subscriptionParams: ISubscription.SubscriptionParamsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtectedDataAddedForRentingEvent {
  export type InputTuple = [
    collectionTokenId: BigNumberish,
    protectedData: AddressLike,
    price: BigNumberish,
    duration: BigNumberish
  ];
  export type OutputTuple = [
    collectionTokenId: bigint,
    protectedData: string,
    price: bigint,
    duration: bigint
  ];
  export interface OutputObject {
    collectionTokenId: bigint;
    protectedData: string;
    price: bigint;
    duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtectedDataAddedForSaleEvent {
  export type InputTuple = [
    collectionTokenId: BigNumberish,
    protectedData: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    collectionTokenId: bigint,
    protectedData: string,
    price: bigint
  ];
  export interface OutputObject {
    collectionTokenId: bigint;
    protectedData: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtectedDataAddedForSubscriptionEvent {
  export type InputTuple = [
    collectionTokenId: BigNumberish,
    protectedData: AddressLike
  ];
  export type OutputTuple = [collectionTokenId: bigint, protectedData: string];
  export interface OutputObject {
    collectionTokenId: bigint;
    protectedData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtectedDataConsumedEvent {
  export type InputTuple = [
    dealId: BytesLike,
    protectedData: AddressLike,
    mode: BigNumberish
  ];
  export type OutputTuple = [
    dealId: string,
    protectedData: string,
    mode: bigint
  ];
  export interface OutputObject {
    dealId: string;
    protectedData: string;
    mode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtectedDataRemovedFromRentingEvent {
  export type InputTuple = [
    collectionTokenId: BigNumberish,
    protectedData: AddressLike
  ];
  export type OutputTuple = [collectionTokenId: bigint, protectedData: string];
  export interface OutputObject {
    collectionTokenId: bigint;
    protectedData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtectedDataRemovedFromSaleEvent {
  export type InputTuple = [
    collectionTokenId: BigNumberish,
    protectedData: AddressLike
  ];
  export type OutputTuple = [collectionTokenId: bigint, protectedData: string];
  export interface OutputObject {
    collectionTokenId: bigint;
    protectedData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtectedDataRemovedFromSubscriptionEvent {
  export type InputTuple = [
    collectionTokenId: BigNumberish,
    protectedData: AddressLike
  ];
  export type OutputTuple = [collectionTokenId: bigint, protectedData: string];
  export interface OutputObject {
    collectionTokenId: bigint;
    protectedData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtectedDataSoldEvent {
  export type InputTuple = [
    collectionTokenIdFrom: BigNumberish,
    to: AddressLike,
    protectedData: AddressLike
  ];
  export type OutputTuple = [
    collectionTokenIdFrom: bigint,
    to: string,
    protectedData: string
  ];
  export interface OutputObject {
    collectionTokenIdFrom: bigint;
    to: string;
    protectedData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtectedDataTransferEvent {
  export type InputTuple = [
    protectedData: AddressLike,
    newCollection: BigNumberish,
    oldCollection: BigNumberish,
    appAddress: AddressLike
  ];
  export type OutputTuple = [
    protectedData: string,
    newCollection: bigint,
    oldCollection: bigint,
    appAddress: string
  ];
  export interface OutputObject {
    protectedData: string;
    newCollection: bigint;
    oldCollection: bigint;
    appAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ProtectedDataSharing extends BaseContract {
  connect(runner?: ContractRunner | null): ProtectedDataSharing;
  waitForDeployment(): Promise<this>;

  interface: ProtectedDataSharingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  addProtectedDataToCollection: TypedContractMethod<
    [
      _collectionTokenId: BigNumberish,
      _protectedData: AddressLike,
      _appAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  buyProtectedData: TypedContractMethod<
    [
      _collectionTokenIdFrom: BigNumberish,
      _protectedData: AddressLike,
      _to: AddressLike
    ],
    [void],
    "payable"
  >;

  buyProtectedDataForCollection: TypedContractMethod<
    [
      _collectionTokenIdFrom: BigNumberish,
      _protectedData: AddressLike,
      _collectionTokenIdTo: BigNumberish,
      _appAddress: AddressLike
    ],
    [void],
    "payable"
  >;

  collectionDetails: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, ISubscription.SubscriptionParamsStructOutput] & {
        size: bigint;
        subscriptionExpiration: bigint;
        subscriptionParams: ISubscription.SubscriptionParamsStructOutput;
      }
    ],
    "view"
  >;

  consumeProtectedData: TypedContractMethod<
    [
      _collectionTokenId: BigNumberish,
      _protectedData: AddressLike,
      _workerpoolOrder: IexecLibOrders_v5.WorkerpoolOrderStruct,
      _contentPath: string
    ],
    [string],
    "nonpayable"
  >;

  createCollection: TypedContractMethod<
    [_to: AddressLike],
    [bigint],
    "nonpayable"
  >;

  earning: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getCollectionSubscriber: TypedContractMethod<
    [_collectionTokenId: BigNumberish, _subscriberAddress: AddressLike],
    [bigint],
    "view"
  >;

  getProtectedDataRenter: TypedContractMethod<
    [_protectedData: AddressLike, _renterAddress: AddressLike],
    [bigint],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [defaultAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  protectedDataDetails: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        string,
        bigint,
        boolean,
        IRental.RentingParamsStructOutput,
        ISale.SellingParamsStructOutput
      ] & {
        collection: bigint;
        app: string;
        rentalExpiration: bigint;
        inSubscription: boolean;
        rentingParams: IRental.RentingParamsStructOutput;
        sellingParams: ISale.SellingParamsStructOutput;
      }
    ],
    "view"
  >;

  removeCollection: TypedContractMethod<
    [_collectionTokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeProtectedDataForSale: TypedContractMethod<
    [_collectionTokenId: BigNumberish, _protectedData: AddressLike],
    [void],
    "nonpayable"
  >;

  removeProtectedDataFromCollection: TypedContractMethod<
    [_collectionTokenId: BigNumberish, _protectedData: AddressLike],
    [void],
    "nonpayable"
  >;

  removeProtectedDataFromRenting: TypedContractMethod<
    [_collectionTokenId: BigNumberish, _protectedData: AddressLike],
    [void],
    "nonpayable"
  >;

  removeProtectedDataFromSubscription: TypedContractMethod<
    [_collectionTokenId: BigNumberish, _protectedData: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  rentProtectedData: TypedContractMethod<
    [_collectionTokenId: BigNumberish, _protectedData: AddressLike],
    [void],
    "payable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setProtectedDataForSale: TypedContractMethod<
    [
      _collectionTokenId: BigNumberish,
      _protectedData: AddressLike,
      _price: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setProtectedDataToRenting: TypedContractMethod<
    [
      _collectionTokenId: BigNumberish,
      _protectedData: AddressLike,
      _price: BigNumberish,
      _duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setProtectedDataToSubscription: TypedContractMethod<
    [_collectionTokenId: BigNumberish, _protectedData: AddressLike],
    [void],
    "nonpayable"
  >;

  setSubscriptionParams: TypedContractMethod<
    [
      _collectionTokenId: BigNumberish,
      _subscriptionParams: ISubscription.SubscriptionParamsStruct
    ],
    [void],
    "nonpayable"
  >;

  subscribeTo: TypedContractMethod<
    [_collectionTokenId: BigNumberish],
    [bigint],
    "payable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateEnv: TypedContractMethod<
    [
      iexec_result_storage_provider_: string,
      iexec_result_storage_proxy_: string
    ],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addProtectedDataToCollection"
  ): TypedContractMethod<
    [
      _collectionTokenId: BigNumberish,
      _protectedData: AddressLike,
      _appAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyProtectedData"
  ): TypedContractMethod<
    [
      _collectionTokenIdFrom: BigNumberish,
      _protectedData: AddressLike,
      _to: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "buyProtectedDataForCollection"
  ): TypedContractMethod<
    [
      _collectionTokenIdFrom: BigNumberish,
      _protectedData: AddressLike,
      _collectionTokenIdTo: BigNumberish,
      _appAddress: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "collectionDetails"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, ISubscription.SubscriptionParamsStructOutput] & {
        size: bigint;
        subscriptionExpiration: bigint;
        subscriptionParams: ISubscription.SubscriptionParamsStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "consumeProtectedData"
  ): TypedContractMethod<
    [
      _collectionTokenId: BigNumberish,
      _protectedData: AddressLike,
      _workerpoolOrder: IexecLibOrders_v5.WorkerpoolOrderStruct,
      _contentPath: string
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createCollection"
  ): TypedContractMethod<[_to: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "earning"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getCollectionSubscriber"
  ): TypedContractMethod<
    [_collectionTokenId: BigNumberish, _subscriberAddress: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProtectedDataRenter"
  ): TypedContractMethod<
    [_protectedData: AddressLike, _renterAddress: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[defaultAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "protectedDataDetails"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        string,
        bigint,
        boolean,
        IRental.RentingParamsStructOutput,
        ISale.SellingParamsStructOutput
      ] & {
        collection: bigint;
        app: string;
        rentalExpiration: bigint;
        inSubscription: boolean;
        rentingParams: IRental.RentingParamsStructOutput;
        sellingParams: ISale.SellingParamsStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeCollection"
  ): TypedContractMethod<
    [_collectionTokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeProtectedDataForSale"
  ): TypedContractMethod<
    [_collectionTokenId: BigNumberish, _protectedData: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeProtectedDataFromCollection"
  ): TypedContractMethod<
    [_collectionTokenId: BigNumberish, _protectedData: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeProtectedDataFromRenting"
  ): TypedContractMethod<
    [_collectionTokenId: BigNumberish, _protectedData: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeProtectedDataFromSubscription"
  ): TypedContractMethod<
    [_collectionTokenId: BigNumberish, _protectedData: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rentProtectedData"
  ): TypedContractMethod<
    [_collectionTokenId: BigNumberish, _protectedData: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProtectedDataForSale"
  ): TypedContractMethod<
    [
      _collectionTokenId: BigNumberish,
      _protectedData: AddressLike,
      _price: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProtectedDataToRenting"
  ): TypedContractMethod<
    [
      _collectionTokenId: BigNumberish,
      _protectedData: AddressLike,
      _price: BigNumberish,
      _duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProtectedDataToSubscription"
  ): TypedContractMethod<
    [_collectionTokenId: BigNumberish, _protectedData: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSubscriptionParams"
  ): TypedContractMethod<
    [
      _collectionTokenId: BigNumberish,
      _subscriptionParams: ISubscription.SubscriptionParamsStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "subscribeTo"
  ): TypedContractMethod<
    [_collectionTokenId: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateEnv"
  ): TypedContractMethod<
    [
      iexec_result_storage_provider_: string,
      iexec_result_storage_proxy_: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NewRental"
  ): TypedContractEvent<
    NewRentalEvent.InputTuple,
    NewRentalEvent.OutputTuple,
    NewRentalEvent.OutputObject
  >;
  getEvent(
    key: "NewSubscription"
  ): TypedContractEvent<
    NewSubscriptionEvent.InputTuple,
    NewSubscriptionEvent.OutputTuple,
    NewSubscriptionEvent.OutputObject
  >;
  getEvent(
    key: "NewSubscriptionParams"
  ): TypedContractEvent<
    NewSubscriptionParamsEvent.InputTuple,
    NewSubscriptionParamsEvent.OutputTuple,
    NewSubscriptionParamsEvent.OutputObject
  >;
  getEvent(
    key: "ProtectedDataAddedForRenting"
  ): TypedContractEvent<
    ProtectedDataAddedForRentingEvent.InputTuple,
    ProtectedDataAddedForRentingEvent.OutputTuple,
    ProtectedDataAddedForRentingEvent.OutputObject
  >;
  getEvent(
    key: "ProtectedDataAddedForSale"
  ): TypedContractEvent<
    ProtectedDataAddedForSaleEvent.InputTuple,
    ProtectedDataAddedForSaleEvent.OutputTuple,
    ProtectedDataAddedForSaleEvent.OutputObject
  >;
  getEvent(
    key: "ProtectedDataAddedForSubscription"
  ): TypedContractEvent<
    ProtectedDataAddedForSubscriptionEvent.InputTuple,
    ProtectedDataAddedForSubscriptionEvent.OutputTuple,
    ProtectedDataAddedForSubscriptionEvent.OutputObject
  >;
  getEvent(
    key: "ProtectedDataConsumed"
  ): TypedContractEvent<
    ProtectedDataConsumedEvent.InputTuple,
    ProtectedDataConsumedEvent.OutputTuple,
    ProtectedDataConsumedEvent.OutputObject
  >;
  getEvent(
    key: "ProtectedDataRemovedFromRenting"
  ): TypedContractEvent<
    ProtectedDataRemovedFromRentingEvent.InputTuple,
    ProtectedDataRemovedFromRentingEvent.OutputTuple,
    ProtectedDataRemovedFromRentingEvent.OutputObject
  >;
  getEvent(
    key: "ProtectedDataRemovedFromSale"
  ): TypedContractEvent<
    ProtectedDataRemovedFromSaleEvent.InputTuple,
    ProtectedDataRemovedFromSaleEvent.OutputTuple,
    ProtectedDataRemovedFromSaleEvent.OutputObject
  >;
  getEvent(
    key: "ProtectedDataRemovedFromSubscription"
  ): TypedContractEvent<
    ProtectedDataRemovedFromSubscriptionEvent.InputTuple,
    ProtectedDataRemovedFromSubscriptionEvent.OutputTuple,
    ProtectedDataRemovedFromSubscriptionEvent.OutputObject
  >;
  getEvent(
    key: "ProtectedDataSold"
  ): TypedContractEvent<
    ProtectedDataSoldEvent.InputTuple,
    ProtectedDataSoldEvent.OutputTuple,
    ProtectedDataSoldEvent.OutputObject
  >;
  getEvent(
    key: "ProtectedDataTransfer"
  ): TypedContractEvent<
    ProtectedDataTransferEvent.InputTuple,
    ProtectedDataTransferEvent.OutputTuple,
    ProtectedDataTransferEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NewRental(uint256,address,address,uint48)": TypedContractEvent<
      NewRentalEvent.InputTuple,
      NewRentalEvent.OutputTuple,
      NewRentalEvent.OutputObject
    >;
    NewRental: TypedContractEvent<
      NewRentalEvent.InputTuple,
      NewRentalEvent.OutputTuple,
      NewRentalEvent.OutputObject
    >;

    "NewSubscription(uint256,address,uint48)": TypedContractEvent<
      NewSubscriptionEvent.InputTuple,
      NewSubscriptionEvent.OutputTuple,
      NewSubscriptionEvent.OutputObject
    >;
    NewSubscription: TypedContractEvent<
      NewSubscriptionEvent.InputTuple,
      NewSubscriptionEvent.OutputTuple,
      NewSubscriptionEvent.OutputObject
    >;

    "NewSubscriptionParams(uint256,tuple)": TypedContractEvent<
      NewSubscriptionParamsEvent.InputTuple,
      NewSubscriptionParamsEvent.OutputTuple,
      NewSubscriptionParamsEvent.OutputObject
    >;
    NewSubscriptionParams: TypedContractEvent<
      NewSubscriptionParamsEvent.InputTuple,
      NewSubscriptionParamsEvent.OutputTuple,
      NewSubscriptionParamsEvent.OutputObject
    >;

    "ProtectedDataAddedForRenting(uint256,address,uint112,uint48)": TypedContractEvent<
      ProtectedDataAddedForRentingEvent.InputTuple,
      ProtectedDataAddedForRentingEvent.OutputTuple,
      ProtectedDataAddedForRentingEvent.OutputObject
    >;
    ProtectedDataAddedForRenting: TypedContractEvent<
      ProtectedDataAddedForRentingEvent.InputTuple,
      ProtectedDataAddedForRentingEvent.OutputTuple,
      ProtectedDataAddedForRentingEvent.OutputObject
    >;

    "ProtectedDataAddedForSale(uint256,address,uint112)": TypedContractEvent<
      ProtectedDataAddedForSaleEvent.InputTuple,
      ProtectedDataAddedForSaleEvent.OutputTuple,
      ProtectedDataAddedForSaleEvent.OutputObject
    >;
    ProtectedDataAddedForSale: TypedContractEvent<
      ProtectedDataAddedForSaleEvent.InputTuple,
      ProtectedDataAddedForSaleEvent.OutputTuple,
      ProtectedDataAddedForSaleEvent.OutputObject
    >;

    "ProtectedDataAddedForSubscription(uint256,address)": TypedContractEvent<
      ProtectedDataAddedForSubscriptionEvent.InputTuple,
      ProtectedDataAddedForSubscriptionEvent.OutputTuple,
      ProtectedDataAddedForSubscriptionEvent.OutputObject
    >;
    ProtectedDataAddedForSubscription: TypedContractEvent<
      ProtectedDataAddedForSubscriptionEvent.InputTuple,
      ProtectedDataAddedForSubscriptionEvent.OutputTuple,
      ProtectedDataAddedForSubscriptionEvent.OutputObject
    >;

    "ProtectedDataConsumed(bytes32,address,uint8)": TypedContractEvent<
      ProtectedDataConsumedEvent.InputTuple,
      ProtectedDataConsumedEvent.OutputTuple,
      ProtectedDataConsumedEvent.OutputObject
    >;
    ProtectedDataConsumed: TypedContractEvent<
      ProtectedDataConsumedEvent.InputTuple,
      ProtectedDataConsumedEvent.OutputTuple,
      ProtectedDataConsumedEvent.OutputObject
    >;

    "ProtectedDataRemovedFromRenting(uint256,address)": TypedContractEvent<
      ProtectedDataRemovedFromRentingEvent.InputTuple,
      ProtectedDataRemovedFromRentingEvent.OutputTuple,
      ProtectedDataRemovedFromRentingEvent.OutputObject
    >;
    ProtectedDataRemovedFromRenting: TypedContractEvent<
      ProtectedDataRemovedFromRentingEvent.InputTuple,
      ProtectedDataRemovedFromRentingEvent.OutputTuple,
      ProtectedDataRemovedFromRentingEvent.OutputObject
    >;

    "ProtectedDataRemovedFromSale(uint256,address)": TypedContractEvent<
      ProtectedDataRemovedFromSaleEvent.InputTuple,
      ProtectedDataRemovedFromSaleEvent.OutputTuple,
      ProtectedDataRemovedFromSaleEvent.OutputObject
    >;
    ProtectedDataRemovedFromSale: TypedContractEvent<
      ProtectedDataRemovedFromSaleEvent.InputTuple,
      ProtectedDataRemovedFromSaleEvent.OutputTuple,
      ProtectedDataRemovedFromSaleEvent.OutputObject
    >;

    "ProtectedDataRemovedFromSubscription(uint256,address)": TypedContractEvent<
      ProtectedDataRemovedFromSubscriptionEvent.InputTuple,
      ProtectedDataRemovedFromSubscriptionEvent.OutputTuple,
      ProtectedDataRemovedFromSubscriptionEvent.OutputObject
    >;
    ProtectedDataRemovedFromSubscription: TypedContractEvent<
      ProtectedDataRemovedFromSubscriptionEvent.InputTuple,
      ProtectedDataRemovedFromSubscriptionEvent.OutputTuple,
      ProtectedDataRemovedFromSubscriptionEvent.OutputObject
    >;

    "ProtectedDataSold(uint256,address,address)": TypedContractEvent<
      ProtectedDataSoldEvent.InputTuple,
      ProtectedDataSoldEvent.OutputTuple,
      ProtectedDataSoldEvent.OutputObject
    >;
    ProtectedDataSold: TypedContractEvent<
      ProtectedDataSoldEvent.InputTuple,
      ProtectedDataSoldEvent.OutputTuple,
      ProtectedDataSoldEvent.OutputObject
    >;

    "ProtectedDataTransfer(address,uint256,uint256,address)": TypedContractEvent<
      ProtectedDataTransferEvent.InputTuple,
      ProtectedDataTransferEvent.OutputTuple,
      ProtectedDataTransferEvent.OutputObject
    >;
    ProtectedDataTransfer: TypedContractEvent<
      ProtectedDataTransferEvent.InputTuple,
      ProtectedDataTransferEvent.OutputTuple,
      ProtectedDataTransferEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Withdraw(address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
