/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common.js";

export declare namespace ISubscription {
  export type SubscriptionParamsStruct = {
    price: BigNumberish;
    duration: BigNumberish;
  };

  export type SubscriptionParamsStructOutput = [
    price: bigint,
    duration: bigint
  ] & { price: bigint; duration: bigint };
}

export interface ISubscriptionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "removeProtectedDataFromSubscription"
      | "setProtectedDataToSubscription"
      | "setSubscriptionParams"
      | "subscribeTo"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "NewSubscription"
      | "NewSubscriptionParams"
      | "ProtectedDataAddedForSubscription"
      | "ProtectedDataRemovedFromSubscription"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "removeProtectedDataFromSubscription",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtectedDataToSubscription",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubscriptionParams",
    values: [BigNumberish, ISubscription.SubscriptionParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeTo",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "removeProtectedDataFromSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtectedDataToSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubscriptionParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscribeTo",
    data: BytesLike
  ): Result;
}

export namespace NewSubscriptionEvent {
  export type InputTuple = [
    collectionTokenId: BigNumberish,
    subscriber: AddressLike,
    endDate: BigNumberish
  ];
  export type OutputTuple = [
    collectionTokenId: bigint,
    subscriber: string,
    endDate: bigint
  ];
  export interface OutputObject {
    collectionTokenId: bigint;
    subscriber: string;
    endDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewSubscriptionParamsEvent {
  export type InputTuple = [
    collectionTokenId: BigNumberish,
    subscriptionParams: ISubscription.SubscriptionParamsStruct
  ];
  export type OutputTuple = [
    collectionTokenId: bigint,
    subscriptionParams: ISubscription.SubscriptionParamsStructOutput
  ];
  export interface OutputObject {
    collectionTokenId: bigint;
    subscriptionParams: ISubscription.SubscriptionParamsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtectedDataAddedForSubscriptionEvent {
  export type InputTuple = [
    collectionTokenId: BigNumberish,
    protectedData: AddressLike
  ];
  export type OutputTuple = [collectionTokenId: bigint, protectedData: string];
  export interface OutputObject {
    collectionTokenId: bigint;
    protectedData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtectedDataRemovedFromSubscriptionEvent {
  export type InputTuple = [
    collectionTokenId: BigNumberish,
    protectedData: AddressLike
  ];
  export type OutputTuple = [collectionTokenId: bigint, protectedData: string];
  export interface OutputObject {
    collectionTokenId: bigint;
    protectedData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISubscription extends BaseContract {
  connect(runner?: ContractRunner | null): ISubscription;
  waitForDeployment(): Promise<this>;

  interface: ISubscriptionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  removeProtectedDataFromSubscription: TypedContractMethod<
    [_collectionTokenId: BigNumberish, _protectedData: AddressLike],
    [void],
    "nonpayable"
  >;

  setProtectedDataToSubscription: TypedContractMethod<
    [_collectionTokenId: BigNumberish, _protectedData: AddressLike],
    [void],
    "nonpayable"
  >;

  setSubscriptionParams: TypedContractMethod<
    [
      _collectionTokenId: BigNumberish,
      _subscriptionParams: ISubscription.SubscriptionParamsStruct
    ],
    [void],
    "nonpayable"
  >;

  subscribeTo: TypedContractMethod<
    [_collectionTokenId: BigNumberish],
    [bigint],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "removeProtectedDataFromSubscription"
  ): TypedContractMethod<
    [_collectionTokenId: BigNumberish, _protectedData: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProtectedDataToSubscription"
  ): TypedContractMethod<
    [_collectionTokenId: BigNumberish, _protectedData: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSubscriptionParams"
  ): TypedContractMethod<
    [
      _collectionTokenId: BigNumberish,
      _subscriptionParams: ISubscription.SubscriptionParamsStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "subscribeTo"
  ): TypedContractMethod<
    [_collectionTokenId: BigNumberish],
    [bigint],
    "payable"
  >;

  getEvent(
    key: "NewSubscription"
  ): TypedContractEvent<
    NewSubscriptionEvent.InputTuple,
    NewSubscriptionEvent.OutputTuple,
    NewSubscriptionEvent.OutputObject
  >;
  getEvent(
    key: "NewSubscriptionParams"
  ): TypedContractEvent<
    NewSubscriptionParamsEvent.InputTuple,
    NewSubscriptionParamsEvent.OutputTuple,
    NewSubscriptionParamsEvent.OutputObject
  >;
  getEvent(
    key: "ProtectedDataAddedForSubscription"
  ): TypedContractEvent<
    ProtectedDataAddedForSubscriptionEvent.InputTuple,
    ProtectedDataAddedForSubscriptionEvent.OutputTuple,
    ProtectedDataAddedForSubscriptionEvent.OutputObject
  >;
  getEvent(
    key: "ProtectedDataRemovedFromSubscription"
  ): TypedContractEvent<
    ProtectedDataRemovedFromSubscriptionEvent.InputTuple,
    ProtectedDataRemovedFromSubscriptionEvent.OutputTuple,
    ProtectedDataRemovedFromSubscriptionEvent.OutputObject
  >;

  filters: {
    "NewSubscription(uint256,address,uint48)": TypedContractEvent<
      NewSubscriptionEvent.InputTuple,
      NewSubscriptionEvent.OutputTuple,
      NewSubscriptionEvent.OutputObject
    >;
    NewSubscription: TypedContractEvent<
      NewSubscriptionEvent.InputTuple,
      NewSubscriptionEvent.OutputTuple,
      NewSubscriptionEvent.OutputObject
    >;

    "NewSubscriptionParams(uint256,tuple)": TypedContractEvent<
      NewSubscriptionParamsEvent.InputTuple,
      NewSubscriptionParamsEvent.OutputTuple,
      NewSubscriptionParamsEvent.OutputObject
    >;
    NewSubscriptionParams: TypedContractEvent<
      NewSubscriptionParamsEvent.InputTuple,
      NewSubscriptionParamsEvent.OutputTuple,
      NewSubscriptionParamsEvent.OutputObject
    >;

    "ProtectedDataAddedForSubscription(uint256,address)": TypedContractEvent<
      ProtectedDataAddedForSubscriptionEvent.InputTuple,
      ProtectedDataAddedForSubscriptionEvent.OutputTuple,
      ProtectedDataAddedForSubscriptionEvent.OutputObject
    >;
    ProtectedDataAddedForSubscription: TypedContractEvent<
      ProtectedDataAddedForSubscriptionEvent.InputTuple,
      ProtectedDataAddedForSubscriptionEvent.OutputTuple,
      ProtectedDataAddedForSubscriptionEvent.OutputObject
    >;

    "ProtectedDataRemovedFromSubscription(uint256,address)": TypedContractEvent<
      ProtectedDataRemovedFromSubscriptionEvent.InputTuple,
      ProtectedDataRemovedFromSubscriptionEvent.OutputTuple,
      ProtectedDataRemovedFromSubscriptionEvent.OutputObject
    >;
    ProtectedDataRemovedFromSubscription: TypedContractEvent<
      ProtectedDataRemovedFromSubscriptionEvent.InputTuple,
      ProtectedDataRemovedFromSubscriptionEvent.OutputTuple,
      ProtectedDataRemovedFromSubscriptionEvent.OutputObject
    >;
  };
}
