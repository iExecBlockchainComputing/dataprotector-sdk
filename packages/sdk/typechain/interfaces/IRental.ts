/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common.js";

export interface IRentalInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "removeProtectedDataFromRenting"
      | "rentProtectedData"
      | "setProtectedDataToRenting"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "NewRental"
      | "ProtectedDataAddedForRenting"
      | "ProtectedDataRemovedFromRenting"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "removeProtectedDataFromRenting",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rentProtectedData",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtectedDataToRenting",
    values: [BigNumberish, AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "removeProtectedDataFromRenting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rentProtectedData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtectedDataToRenting",
    data: BytesLike
  ): Result;
}

export namespace NewRentalEvent {
  export type InputTuple = [
    collectionTokenId: BigNumberish,
    protectedData: AddressLike,
    renter: AddressLike,
    endDate: BigNumberish
  ];
  export type OutputTuple = [
    collectionTokenId: bigint,
    protectedData: string,
    renter: string,
    endDate: bigint
  ];
  export interface OutputObject {
    collectionTokenId: bigint;
    protectedData: string;
    renter: string;
    endDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtectedDataAddedForRentingEvent {
  export type InputTuple = [
    collectionTokenId: BigNumberish,
    protectedData: AddressLike,
    price: BigNumberish,
    duration: BigNumberish
  ];
  export type OutputTuple = [
    collectionTokenId: bigint,
    protectedData: string,
    price: bigint,
    duration: bigint
  ];
  export interface OutputObject {
    collectionTokenId: bigint;
    protectedData: string;
    price: bigint;
    duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtectedDataRemovedFromRentingEvent {
  export type InputTuple = [
    collectionTokenId: BigNumberish,
    protectedData: AddressLike
  ];
  export type OutputTuple = [collectionTokenId: bigint, protectedData: string];
  export interface OutputObject {
    collectionTokenId: bigint;
    protectedData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRental extends BaseContract {
  connect(runner?: ContractRunner | null): IRental;
  waitForDeployment(): Promise<this>;

  interface: IRentalInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  removeProtectedDataFromRenting: TypedContractMethod<
    [_collectionTokenId: BigNumberish, _protectedData: AddressLike],
    [void],
    "nonpayable"
  >;

  rentProtectedData: TypedContractMethod<
    [_collectionTokenId: BigNumberish, _protectedData: AddressLike],
    [void],
    "payable"
  >;

  setProtectedDataToRenting: TypedContractMethod<
    [
      _collectionTokenId: BigNumberish,
      _protectedData: AddressLike,
      _price: BigNumberish,
      _duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "removeProtectedDataFromRenting"
  ): TypedContractMethod<
    [_collectionTokenId: BigNumberish, _protectedData: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rentProtectedData"
  ): TypedContractMethod<
    [_collectionTokenId: BigNumberish, _protectedData: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setProtectedDataToRenting"
  ): TypedContractMethod<
    [
      _collectionTokenId: BigNumberish,
      _protectedData: AddressLike,
      _price: BigNumberish,
      _duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "NewRental"
  ): TypedContractEvent<
    NewRentalEvent.InputTuple,
    NewRentalEvent.OutputTuple,
    NewRentalEvent.OutputObject
  >;
  getEvent(
    key: "ProtectedDataAddedForRenting"
  ): TypedContractEvent<
    ProtectedDataAddedForRentingEvent.InputTuple,
    ProtectedDataAddedForRentingEvent.OutputTuple,
    ProtectedDataAddedForRentingEvent.OutputObject
  >;
  getEvent(
    key: "ProtectedDataRemovedFromRenting"
  ): TypedContractEvent<
    ProtectedDataRemovedFromRentingEvent.InputTuple,
    ProtectedDataRemovedFromRentingEvent.OutputTuple,
    ProtectedDataRemovedFromRentingEvent.OutputObject
  >;

  filters: {
    "NewRental(uint256,address,address,uint48)": TypedContractEvent<
      NewRentalEvent.InputTuple,
      NewRentalEvent.OutputTuple,
      NewRentalEvent.OutputObject
    >;
    NewRental: TypedContractEvent<
      NewRentalEvent.InputTuple,
      NewRentalEvent.OutputTuple,
      NewRentalEvent.OutputObject
    >;

    "ProtectedDataAddedForRenting(uint256,address,uint112,uint48)": TypedContractEvent<
      ProtectedDataAddedForRentingEvent.InputTuple,
      ProtectedDataAddedForRentingEvent.OutputTuple,
      ProtectedDataAddedForRentingEvent.OutputObject
    >;
    ProtectedDataAddedForRenting: TypedContractEvent<
      ProtectedDataAddedForRentingEvent.InputTuple,
      ProtectedDataAddedForRentingEvent.OutputTuple,
      ProtectedDataAddedForRentingEvent.OutputObject
    >;

    "ProtectedDataRemovedFromRenting(uint256,address)": TypedContractEvent<
      ProtectedDataRemovedFromRentingEvent.InputTuple,
      ProtectedDataRemovedFromRentingEvent.OutputTuple,
      ProtectedDataRemovedFromRentingEvent.OutputObject
    >;
    ProtectedDataRemovedFromRenting: TypedContractEvent<
      ProtectedDataRemovedFromRentingEvent.InputTuple,
      ProtectedDataRemovedFromRentingEvent.OutputTuple,
      ProtectedDataRemovedFromRentingEvent.OutputObject
    >;
  };
}
