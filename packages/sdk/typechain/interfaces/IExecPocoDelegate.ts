/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common.js";

export declare namespace IexecLibOrders_v5 {
  export type AppOrderStruct = {
    app: AddressLike;
    appprice: BigNumberish;
    volume: BigNumberish;
    tag: BytesLike;
    datasetrestrict: AddressLike;
    workerpoolrestrict: AddressLike;
    requesterrestrict: AddressLike;
    salt: BytesLike;
    sign: BytesLike;
  };

  export type AppOrderStructOutput = [
    app: string,
    appprice: bigint,
    volume: bigint,
    tag: string,
    datasetrestrict: string,
    workerpoolrestrict: string,
    requesterrestrict: string,
    salt: string,
    sign: string
  ] & {
    app: string;
    appprice: bigint;
    volume: bigint;
    tag: string;
    datasetrestrict: string;
    workerpoolrestrict: string;
    requesterrestrict: string;
    salt: string;
    sign: string;
  };

  export type AppOrderOperationStruct = {
    order: IexecLibOrders_v5.AppOrderStruct;
    operation: BigNumberish;
    sign: BytesLike;
  };

  export type AppOrderOperationStructOutput = [
    order: IexecLibOrders_v5.AppOrderStructOutput,
    operation: bigint,
    sign: string
  ] & {
    order: IexecLibOrders_v5.AppOrderStructOutput;
    operation: bigint;
    sign: string;
  };

  export type DatasetOrderStruct = {
    dataset: AddressLike;
    datasetprice: BigNumberish;
    volume: BigNumberish;
    tag: BytesLike;
    apprestrict: AddressLike;
    workerpoolrestrict: AddressLike;
    requesterrestrict: AddressLike;
    salt: BytesLike;
    sign: BytesLike;
  };

  export type DatasetOrderStructOutput = [
    dataset: string,
    datasetprice: bigint,
    volume: bigint,
    tag: string,
    apprestrict: string,
    workerpoolrestrict: string,
    requesterrestrict: string,
    salt: string,
    sign: string
  ] & {
    dataset: string;
    datasetprice: bigint;
    volume: bigint;
    tag: string;
    apprestrict: string;
    workerpoolrestrict: string;
    requesterrestrict: string;
    salt: string;
    sign: string;
  };

  export type DatasetOrderOperationStruct = {
    order: IexecLibOrders_v5.DatasetOrderStruct;
    operation: BigNumberish;
    sign: BytesLike;
  };

  export type DatasetOrderOperationStructOutput = [
    order: IexecLibOrders_v5.DatasetOrderStructOutput,
    operation: bigint,
    sign: string
  ] & {
    order: IexecLibOrders_v5.DatasetOrderStructOutput;
    operation: bigint;
    sign: string;
  };

  export type RequestOrderStruct = {
    app: AddressLike;
    appmaxprice: BigNumberish;
    dataset: AddressLike;
    datasetmaxprice: BigNumberish;
    workerpool: AddressLike;
    workerpoolmaxprice: BigNumberish;
    requester: AddressLike;
    volume: BigNumberish;
    tag: BytesLike;
    category: BigNumberish;
    trust: BigNumberish;
    beneficiary: AddressLike;
    callback: AddressLike;
    params: string;
    salt: BytesLike;
    sign: BytesLike;
  };

  export type RequestOrderStructOutput = [
    app: string,
    appmaxprice: bigint,
    dataset: string,
    datasetmaxprice: bigint,
    workerpool: string,
    workerpoolmaxprice: bigint,
    requester: string,
    volume: bigint,
    tag: string,
    category: bigint,
    trust: bigint,
    beneficiary: string,
    callback: string,
    params: string,
    salt: string,
    sign: string
  ] & {
    app: string;
    appmaxprice: bigint;
    dataset: string;
    datasetmaxprice: bigint;
    workerpool: string;
    workerpoolmaxprice: bigint;
    requester: string;
    volume: bigint;
    tag: string;
    category: bigint;
    trust: bigint;
    beneficiary: string;
    callback: string;
    params: string;
    salt: string;
    sign: string;
  };

  export type RequestOrderOperationStruct = {
    order: IexecLibOrders_v5.RequestOrderStruct;
    operation: BigNumberish;
    sign: BytesLike;
  };

  export type RequestOrderOperationStructOutput = [
    order: IexecLibOrders_v5.RequestOrderStructOutput,
    operation: bigint,
    sign: string
  ] & {
    order: IexecLibOrders_v5.RequestOrderStructOutput;
    operation: bigint;
    sign: string;
  };

  export type WorkerpoolOrderStruct = {
    workerpool: AddressLike;
    workerpoolprice: BigNumberish;
    volume: BigNumberish;
    tag: BytesLike;
    category: BigNumberish;
    trust: BigNumberish;
    apprestrict: AddressLike;
    datasetrestrict: AddressLike;
    requesterrestrict: AddressLike;
    salt: BytesLike;
    sign: BytesLike;
  };

  export type WorkerpoolOrderStructOutput = [
    workerpool: string,
    workerpoolprice: bigint,
    volume: bigint,
    tag: string,
    category: bigint,
    trust: bigint,
    apprestrict: string,
    datasetrestrict: string,
    requesterrestrict: string,
    salt: string,
    sign: string
  ] & {
    workerpool: string;
    workerpoolprice: bigint;
    volume: bigint;
    tag: string;
    category: bigint;
    trust: bigint;
    apprestrict: string;
    datasetrestrict: string;
    requesterrestrict: string;
    salt: string;
    sign: string;
  };

  export type WorkerpoolOrderOperationStruct = {
    order: IexecLibOrders_v5.WorkerpoolOrderStruct;
    operation: BigNumberish;
    sign: BytesLike;
  };

  export type WorkerpoolOrderOperationStructOutput = [
    order: IexecLibOrders_v5.WorkerpoolOrderStructOutput,
    operation: bigint,
    sign: string
  ] & {
    order: IexecLibOrders_v5.WorkerpoolOrderStructOutput;
    operation: bigint;
    sign: string;
  };
}

export interface IExecPocoDelegateInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "manageAppOrder"
      | "manageDatasetOrder"
      | "manageRequestOrder"
      | "manageWorkerpoolOrder"
      | "matchOrders"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "manageAppOrder",
    values: [IexecLibOrders_v5.AppOrderOperationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "manageDatasetOrder",
    values: [IexecLibOrders_v5.DatasetOrderOperationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "manageRequestOrder",
    values: [IexecLibOrders_v5.RequestOrderOperationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "manageWorkerpoolOrder",
    values: [IexecLibOrders_v5.WorkerpoolOrderOperationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "matchOrders",
    values: [
      IexecLibOrders_v5.AppOrderStruct,
      IexecLibOrders_v5.DatasetOrderStruct,
      IexecLibOrders_v5.WorkerpoolOrderStruct,
      IexecLibOrders_v5.RequestOrderStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "manageAppOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manageDatasetOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manageRequestOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manageWorkerpoolOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchOrders",
    data: BytesLike
  ): Result;
}

export interface IExecPocoDelegate extends BaseContract {
  connect(runner?: ContractRunner | null): IExecPocoDelegate;
  waitForDeployment(): Promise<this>;

  interface: IExecPocoDelegateInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  manageAppOrder: TypedContractMethod<
    [operation: IexecLibOrders_v5.AppOrderOperationStruct],
    [void],
    "nonpayable"
  >;

  manageDatasetOrder: TypedContractMethod<
    [operation: IexecLibOrders_v5.DatasetOrderOperationStruct],
    [void],
    "nonpayable"
  >;

  manageRequestOrder: TypedContractMethod<
    [operation: IexecLibOrders_v5.RequestOrderOperationStruct],
    [void],
    "nonpayable"
  >;

  manageWorkerpoolOrder: TypedContractMethod<
    [operation: IexecLibOrders_v5.WorkerpoolOrderOperationStruct],
    [void],
    "nonpayable"
  >;

  matchOrders: TypedContractMethod<
    [
      appOrder: IexecLibOrders_v5.AppOrderStruct,
      datasetOrder: IexecLibOrders_v5.DatasetOrderStruct,
      workerpoolOrder: IexecLibOrders_v5.WorkerpoolOrderStruct,
      requestOrder: IexecLibOrders_v5.RequestOrderStruct
    ],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "manageAppOrder"
  ): TypedContractMethod<
    [operation: IexecLibOrders_v5.AppOrderOperationStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "manageDatasetOrder"
  ): TypedContractMethod<
    [operation: IexecLibOrders_v5.DatasetOrderOperationStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "manageRequestOrder"
  ): TypedContractMethod<
    [operation: IexecLibOrders_v5.RequestOrderOperationStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "manageWorkerpoolOrder"
  ): TypedContractMethod<
    [operation: IexecLibOrders_v5.WorkerpoolOrderOperationStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "matchOrders"
  ): TypedContractMethod<
    [
      appOrder: IexecLibOrders_v5.AppOrderStruct,
      datasetOrder: IexecLibOrders_v5.DatasetOrderStruct,
      workerpoolOrder: IexecLibOrders_v5.WorkerpoolOrderStruct,
      requestOrder: IexecLibOrders_v5.RequestOrderStruct
    ],
    [string],
    "nonpayable"
  >;

  filters: {};
}
