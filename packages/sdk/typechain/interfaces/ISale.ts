/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common.js";

export interface ISaleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyProtectedData"
      | "buyProtectedDataForCollection"
      | "removeProtectedDataForSale"
      | "setProtectedDataForSale"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ProtectedDataAddedForSale"
      | "ProtectedDataRemovedFromSale"
      | "ProtectedDataSold"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buyProtectedData",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyProtectedDataForCollection",
    values: [BigNumberish, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeProtectedDataForSale",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtectedDataForSale",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "buyProtectedData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyProtectedDataForCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeProtectedDataForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtectedDataForSale",
    data: BytesLike
  ): Result;
}

export namespace ProtectedDataAddedForSaleEvent {
  export type InputTuple = [
    collectionTokenId: BigNumberish,
    protectedData: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    collectionTokenId: bigint,
    protectedData: string,
    price: bigint
  ];
  export interface OutputObject {
    collectionTokenId: bigint;
    protectedData: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtectedDataRemovedFromSaleEvent {
  export type InputTuple = [
    collectionTokenId: BigNumberish,
    protectedData: AddressLike
  ];
  export type OutputTuple = [collectionTokenId: bigint, protectedData: string];
  export interface OutputObject {
    collectionTokenId: bigint;
    protectedData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtectedDataSoldEvent {
  export type InputTuple = [
    collectionTokenIdFrom: BigNumberish,
    to: AddressLike,
    protectedData: AddressLike
  ];
  export type OutputTuple = [
    collectionTokenIdFrom: bigint,
    to: string,
    protectedData: string
  ];
  export interface OutputObject {
    collectionTokenIdFrom: bigint;
    to: string;
    protectedData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISale extends BaseContract {
  connect(runner?: ContractRunner | null): ISale;
  waitForDeployment(): Promise<this>;

  interface: ISaleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyProtectedData: TypedContractMethod<
    [
      _collectionTokenIdFrom: BigNumberish,
      _protectedData: AddressLike,
      _to: AddressLike
    ],
    [void],
    "payable"
  >;

  buyProtectedDataForCollection: TypedContractMethod<
    [
      _collectionTokenIdFrom: BigNumberish,
      _protectedData: AddressLike,
      _collectionTokenIdTo: BigNumberish,
      _appAddress: AddressLike
    ],
    [void],
    "payable"
  >;

  removeProtectedDataForSale: TypedContractMethod<
    [_collectionTokenId: BigNumberish, _protectedData: AddressLike],
    [void],
    "nonpayable"
  >;

  setProtectedDataForSale: TypedContractMethod<
    [
      _collectionTokenId: BigNumberish,
      _protectedData: AddressLike,
      _price: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyProtectedData"
  ): TypedContractMethod<
    [
      _collectionTokenIdFrom: BigNumberish,
      _protectedData: AddressLike,
      _to: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "buyProtectedDataForCollection"
  ): TypedContractMethod<
    [
      _collectionTokenIdFrom: BigNumberish,
      _protectedData: AddressLike,
      _collectionTokenIdTo: BigNumberish,
      _appAddress: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "removeProtectedDataForSale"
  ): TypedContractMethod<
    [_collectionTokenId: BigNumberish, _protectedData: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProtectedDataForSale"
  ): TypedContractMethod<
    [
      _collectionTokenId: BigNumberish,
      _protectedData: AddressLike,
      _price: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ProtectedDataAddedForSale"
  ): TypedContractEvent<
    ProtectedDataAddedForSaleEvent.InputTuple,
    ProtectedDataAddedForSaleEvent.OutputTuple,
    ProtectedDataAddedForSaleEvent.OutputObject
  >;
  getEvent(
    key: "ProtectedDataRemovedFromSale"
  ): TypedContractEvent<
    ProtectedDataRemovedFromSaleEvent.InputTuple,
    ProtectedDataRemovedFromSaleEvent.OutputTuple,
    ProtectedDataRemovedFromSaleEvent.OutputObject
  >;
  getEvent(
    key: "ProtectedDataSold"
  ): TypedContractEvent<
    ProtectedDataSoldEvent.InputTuple,
    ProtectedDataSoldEvent.OutputTuple,
    ProtectedDataSoldEvent.OutputObject
  >;

  filters: {
    "ProtectedDataAddedForSale(uint256,address,uint112)": TypedContractEvent<
      ProtectedDataAddedForSaleEvent.InputTuple,
      ProtectedDataAddedForSaleEvent.OutputTuple,
      ProtectedDataAddedForSaleEvent.OutputObject
    >;
    ProtectedDataAddedForSale: TypedContractEvent<
      ProtectedDataAddedForSaleEvent.InputTuple,
      ProtectedDataAddedForSaleEvent.OutputTuple,
      ProtectedDataAddedForSaleEvent.OutputObject
    >;

    "ProtectedDataRemovedFromSale(uint256,address)": TypedContractEvent<
      ProtectedDataRemovedFromSaleEvent.InputTuple,
      ProtectedDataRemovedFromSaleEvent.OutputTuple,
      ProtectedDataRemovedFromSaleEvent.OutputObject
    >;
    ProtectedDataRemovedFromSale: TypedContractEvent<
      ProtectedDataRemovedFromSaleEvent.InputTuple,
      ProtectedDataRemovedFromSaleEvent.OutputTuple,
      ProtectedDataRemovedFromSaleEvent.OutputObject
    >;

    "ProtectedDataSold(uint256,address,address)": TypedContractEvent<
      ProtectedDataSoldEvent.InputTuple,
      ProtectedDataSoldEvent.OutputTuple,
      ProtectedDataSoldEvent.OutputObject
    >;
    ProtectedDataSold: TypedContractEvent<
      ProtectedDataSoldEvent.InputTuple,
      ProtectedDataSoldEvent.OutputTuple,
      ProtectedDataSoldEvent.OutputObject
    >;
  };
}
